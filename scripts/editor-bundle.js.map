{"version":3,"sources":["src/editor.ts","src/environment.ts","src/main.ts","src/util.ts","src/toolkit/arkArchive.ts","src/toolkit/arkName.ts","src/toolkit/arkProfile.ts","C:/Users/Thierry/Desktop/GitHub/vantage-ark-SE/src/toolkit/basetypes.js","src/toolkit/gameobject.ts","C:/Users/Thierry/Desktop/GitHub/vantage-ark-SE/src/toolkit/namecollector.js","C:/Users/Thierry/Desktop/GitHub/vantage-ark-SE/src/toolkit/namecontainer.js","src/toolkit/namesizecalculator.ts","src/toolkit/propertyContainer.ts","src/toolkit/typesizes.ts","src/toolkit/arrays/arkArray.ts","C:/Users/Thierry/Desktop/GitHub/vantage-ark-SE/src/toolkit/arrays/arkArrayBinaryConstructor.js","src/toolkit/arrays/arkArrayBool.ts","src/toolkit/arrays/arkArrayByteHandler.ts","src/toolkit/arrays/arkArrayByteValue.ts","src/toolkit/arrays/arkArrayDouble.ts","src/toolkit/arrays/arkArrayFloat.ts","src/toolkit/arrays/arkArrayInt.ts","src/toolkit/arrays/arkArrayInt16.ts","src/toolkit/arrays/arkArrayInt64.ts","src/toolkit/arrays/arkArrayInt8.ts","src/toolkit/arrays/arkArrayName.ts","src/toolkit/arrays/arkArrayObjectReference.ts","src/toolkit/arrays/arkArrayRegistry.ts","src/toolkit/arrays/arkArrayString.ts","src/toolkit/arrays/arkArrayStruct.ts","src/toolkit/arrays/arkArrayUInt16.ts","src/toolkit/arrays/arkArrayUInt32.ts","src/toolkit/arrays/arkArrayUInt64.ts","src/toolkit/arrays/arkArrayUInt8.ts","C:/Users/Thierry/Desktop/GitHub/vantage-ark-SE/src/toolkit/data/extraData.js","src/toolkit/data/extraDataFallbackHandler.ts","C:/Users/Thierry/Desktop/GitHub/vantage-ark-SE/src/toolkit/data/extraDataHandler.js","src/toolkit/data/extraDataRegistry.ts","src/toolkit/data/extraDataZero.ts","src/toolkit/data/extraDataZeroHandler.ts","src/toolkit/properties/property.ts","src/toolkit/properties/propertyArray.ts","src/toolkit/properties/propertyBase.ts","C:/Users/Thierry/Desktop/GitHub/vantage-ark-SE/src/toolkit/properties/propertyBinaryConstructor.js","src/toolkit/properties/propertyBool.ts","src/toolkit/properties/propertyByte.ts","src/toolkit/properties/propertyFloat.ts","src/toolkit/properties/propertyInt.ts","src/toolkit/properties/propertyInt16.ts","src/toolkit/properties/propertyInt64.ts","src/toolkit/properties/propertyObject.ts","src/toolkit/properties/propertyRegistry.ts","src/toolkit/properties/propertyStr.ts","src/toolkit/properties/propertyStruct.ts","src/toolkit/properties/propertyUInt16.ts","src/toolkit/properties/propertyUInt64.ts","src/toolkit/structs/struct.ts","src/toolkit/structs/structBase.ts","C:/Users/Thierry/Desktop/GitHub/vantage-ark-SE/src/toolkit/structs/structBinaryConstructor.js","C:/Users/Thierry/Desktop/GitHub/vantage-ark-SE/src/toolkit/structs/structJsonConstructor.js","src/toolkit/structs/structLinearColor.ts","src/toolkit/structs/structPropertyList.ts","src/toolkit/structs/structRegistry.ts","src/toolkit/structs/structUniqueNetIdRepl.ts","src/toolkit/structs/structVector.ts","src/toolkit/types/arkByteValue.ts","src/toolkit/types/locationData.ts","src/toolkit/types/objectReference.ts"],"names":[],"mappings":"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","file":"editor-bundle.js","sourcesContent":["import { ArkProfile } from './toolkit/arkProfile';\r\nimport { ArkArchive } from './toolkit/arkArchive';\r\nimport { Stream } from 'libvantage';\r\nimport { PropertyRegistry } from './toolkit/properties/propertyRegistry';\r\nimport { StructRegistry } from './toolkit/structs/structRegistry';\r\nimport { ArkArrayRegistry } from './toolkit/arrays/arkArrayRegistry';\r\nimport { ExtraDataRegistry } from './toolkit/data/extraDataRegistry';\r\nimport { StructPropertyList } from './toolkit/structs/structPropertyList';\r\nimport { PropertyContainer } from './toolkit/propertyContainer';\r\nimport { ArkName } from './toolkit/arkName';\r\n\r\n\r\nexport class Editor {\r\n    private buffer: Buffer;\r\n    public playerName: string;\r\n\r\n    private profile: ArkProfile;\r\n    private config: PropertyContainer;\r\n    private playerStats: PropertyContainer;\r\n\r\n    public playerMax: number = 130;\r\n    public expMax: number = 1000000;    \r\n    public engramMax: number = 100000;\r\n\r\n    public editorValues: EditorValue[];\r\n    public info: string ;\r\n\r\n    public load(buffer: Buffer) {\r\n\r\n        this.info = 'Respawn to update character level';\r\n        this.buffer = buffer;\r\n\r\n        // register handlers\r\n        ExtraDataRegistry.construct();\r\n        ArkArrayRegistry.construct();\r\n        StructRegistry.construct();\r\n        PropertyRegistry.construct();\r\n\r\n        // read profile data\r\n        this.profile = new ArkProfile(new ArkArchive(new Stream(buffer)));\r\n        const myData = this.profile.getPropertyValue<StructPropertyList>(\"MyData\", StructPropertyList);\r\n        const config = myData.getPropertyValue<PropertyContainer>('MyPlayerCharacterConfig', PropertyContainer);\r\n        const playerStats = myData.getPropertyValue<PropertyContainer>('MyPersistentCharacterStats', PropertyContainer);\r\n\r\n        const profileName = config.getPropertyValue<string>('PlayerCharacterName', 'string');\r\n        this.playerName = profileName;\r\n\r\n        this.config = config;\r\n        this.playerStats = playerStats;\r\n\r\n        // create values for the editor display\r\n        this.editorValues = [\r\n            {\r\n                property:  (playerStats.getPropertyValue<number>('CharacterStatusComponent_ExtraCharacterLevel', 'number') || 0) + 1,\r\n                maxValue: this.playerMax\r\n            },\r\n            {\r\n                property: playerStats.getPropertyValue<number>('CharacterStatusComponent_ExperiencePoints', 'number') || 0,\r\n                maxValue: this.expMax\r\n            },\r\n            {\r\n                property: playerStats.getPropertyValue<number>('PlayerState_TotalEngramPoints', 'number') || 0,\r\n                maxValue: this.engramMax\r\n            },            \r\n        ];\r\n    }\r\n\r\n    public save(): Buffer {\r\n        \r\n        this.config.setCreatePropertyValue<string>('PlayerCharacterName',this.playerName, 'StrProperty');\r\n        this.playerStats.setCreatePropertyValue<number>('CharacterStatusComponent_ExperiencePoints', this.editorValues[Stats.Experience].property, 'FloatProperty');\r\n        \r\n        this.playerStats.setCreatePropertyValue<number>('PlayerState_TotalEngramPoints', this.editorValues[Stats.EngramPoints].property, 'IntProperty');\r\n        this.playerStats.setCreatePropertyValue<number>('CharacterStatusComponent_ExtraCharacterLevel', this.editorValues[Stats.PlayerLevel].property - 1, 'UInt16Property');\r\n        \r\n        // serialize profile to a binary buffer\r\n        return this.profile.save();\r\n    }\r\n\r\n    public maxValue(index: number): void {\r\n        this.editorValues[index].property = this.editorValues[index].maxValue;\r\n    }\r\n}\r\n\r\nexport class PrecisionValueConverter {\r\n    public toView(value: number, precision: number): string {\r\n        if(value) {\r\n            return value.toFixed(precision);\r\n        }\r\n        return '0';\r\n    }\r\n  \r\n    public fromView(value: string): number {\r\n    if(value) {\r\n        return parseFloat(value);\r\n      }\r\n      return 0;\r\n   }\r\n}\r\nexport const enum Stats {\r\n    PlayerLevel = 0,\r\n    Experience = 1,\r\n    EngramPoints = 2,\r\n}\r\ninterface EditorValue {\r\n    property: number;\r\n    maxValue: number;\r\n}","export default {\r\n  debug: true,\r\n  testing: true\r\n};\r\n","import { Aurelia } from 'aurelia-framework';\r\nimport { setEditor } from 'libvantage';\r\n\r\nexport async function configure(aurelia: Aurelia): Promise<void> {\r\n    aurelia.use.basicConfiguration().plugin('libvantage');\r\n    await aurelia.start();\r\n    await aurelia.setRoot('editor');\r\n    setEditor(aurelia['root'].viewModel);\r\n}","import { Stream } from 'libvantage';\r\n\r\nexport function readString(io: Stream): string {\r\n    const len = io.readUInt32();\r\n    if (len === 0) {\r\n        return '';\r\n    }\r\n    const str = io.readString('ascii', len - 1);\r\n    io.position++;\r\n    return str;\r\n}\r\n\r\nexport function writeString(io: Stream, value: string): void {\r\n    io.writeUInt32(value.length + 1);\r\n    io.writeString(value, 'ascii', true);\r\n}","import { ArkName } from './arkName';\r\nimport {Stream} from 'libvantage';\r\n\r\nimport {readString} from '../util';\r\nimport { BigInteger } from 'big-integer';\r\nimport { NameSizeCalculator, DefaultNameSizeCalculator } from './namesizecalculator';\r\nimport * as bigInteger  from 'big-integer';\r\n\r\nexport class ArkArchive {\r\n    \r\n    private io: Stream;\r\n\r\n    public static getNameSizer(): NameSizeCalculator {\r\n        return new DefaultNameSizeCalculator();\r\n    }\r\n    constructor(io: Stream) {\r\n        this.io = io;\r\n    }\r\n    get position(): number {\r\n        return this.io.position;\r\n    }\r\n    set position(value: number) {\r\n        this.io.position = value;\r\n    }\r\n    public getInt(): number {\r\n        return this.io.readInt32();\r\n    }\r\n    public putInt(value: number): void {\r\n        this.io.writeUInt32(value);\r\n    }\r\n    public getUInt(): number {\r\n        return this.io.readInt32();\r\n    }\r\n    public putUInt(value: number): void {\r\n        this.io.writeUInt32(value);\r\n    } \r\n    public getLong(): BigInteger {\r\n        return this.io.readInt64();\r\n    }\r\n    public getULong(): BigInteger {\r\n        return this.io.readUInt64();\r\n    }\r\n    public putLong(value: BigInteger|number) {\r\n        this.io.writeInt64(value);\r\n    }\r\n    public putULong(value: BigInteger|number) {\r\n        this.io.writeUInt64(value);\r\n    }\r\n    public putName(name: ArkName): void {\r\n        this.putString(name.toString());\r\n    }\r\n    public getName(): ArkName {\r\n        return ArkName.from(readString(this.io));\r\n    }\r\n    public getBoolean(): boolean {\r\n        return this.io.readInt32() !== 0;\r\n    }\r\n    public putBoolean(value: boolean): void {\r\n        this.io.writeBoolean(value);\r\n    }\r\n    public getUuid(): Buffer {\r\n        return this.io.readBytes(0x10);\r\n    }\r\n    public getFloat(): number {\r\n        return this.io.readFloat();\r\n    }\r\n    public putFloat(value: number) {\r\n        this.io.writeFloat(value);\r\n    }\r\n    public getDouble(): number {\r\n        return this.io.readDouble();\r\n    }\r\n    public putDouble(value: number) {\r\n        this.io.writeDouble(value);\r\n    } \r\n    public getBytes(size: number): Buffer {\r\n        return this.io.readBytes(size);\r\n    }\r\n    public getByte(): number {\r\n        return this.io.readByte();\r\n    }\r\n    public putByte(value: number): void {\r\n        this.io.writeByte(value);\r\n    }\r\n    public putBytes(value: Buffer): void {\r\n        this.io.writeBytes(value);\r\n    }\r\n    public getShort(): number {\r\n        return this.io.readInt16();\r\n    }\r\n    public putShort(value: number): void {\r\n        this.io.writeInt16(value);\r\n    }\r\n    public getUShort(): number {\r\n        return this.io.readUInt16();\r\n    }\r\n    public putUShort(value: number): void {\r\n        this.io.writeUInt16(value);\r\n    }    \r\n    public getString(): string {\r\n        return this.getName().toString(); // fix later\r\n    }\r\n    public putString(value: string):void {\r\n        this.io.writeInt32(value.length + 1);\r\n        this.io.writeString(value.toString(), \"utf8\", true);\r\n    }\r\n    public static getStringLength(value: string): number {\r\n        if(value == null) {\r\n            return 4;\r\n        }\r\n        if(value === '') {\r\n            return 5;\r\n        }\r\n        const length = value.length + 1;\r\n        const multiByte = !this.isASCII(value);\r\n        return (multiByte ? length * 2 : length) + 4;\r\n    }\r\n    private static isASCII(str: string):boolean {\r\n        return /^[\\x00-\\x7F]*$/.test(str);\r\n    }\r\n    public limit(): number {\r\n        return this.io.length;\r\n    }\r\n    public toBuffer(): Buffer {\r\n        return this.io.getBuffer();\r\n    }\r\n}","interface IArkName extends String {\r\n    string: string;\r\n}\r\n\r\nexport class ArkName {\r\n\r\n    private string: string;\r\n   // private padStart: number;\r\n   // private padEnd: number;\r\n    \r\n    private instance: number;\r\n    private name: string;\r\n    public static nameCache: HashMap[] = [];\r\n    \r\n    public static NAME_NONE: ArkName = ArkName.constantPlain(\"None\");\r\n\r\n    private constructor(name?:string, instance?: number, string?: string) {\r\n\r\n       // debugger;\r\n        //super(name || string || '');\r\n\r\n        this.string = name || string || '';\r\n\r\n        this.name = name || string || '';\r\n        this.instance = instance || 0;\r\n    }\r\n    public static from(name: string): ArkName {\r\n        //debugger;\r\n        const arkName = new ArkName(name);\r\n        this.addToCache(name, arkName);\r\n        return arkName;\r\n    }\r\n\r\n    public getName(): string {\r\n        return this.name;\r\n    }\r\n    public getInstance(): number {\r\n        return this.instance;\r\n    }\r\n    public toString(): string {\r\n        return this.string;\r\n        \r\n    }\r\n    public hashCode(): number {\r\n        var hash = 0, i, chr;\r\n        if (this.string.length === 0) return hash;\r\n\r\n        for (i = 0; i < this.string.length; i++) {\r\n          chr   = this.string.charCodeAt(i);\r\n          hash  = ((hash << 5) - hash) + chr;\r\n          hash |= 0;\r\n        }\r\n        return hash;\r\n    }\r\n    public equals(obj: any): boolean {\r\n        if(this === obj)\r\n            return true;\r\n        if((!(obj as ArkName))) {\r\n            return false;\r\n        }\r\n        return this.string === (obj as ArkName).toString();\r\n    }\r\n    public compareTo(o: ArkName): number {\r\n        return this.string.localeCompare(o.toString());\r\n    }\r\n\r\n    public subSequence(start: number, end: number): string {\r\n        return this.string.substring(start, end);\r\n    }\r\n    public static constantPlain(name: string): ArkName {\r\n        const arkName = ArkName.from(name);\r\n        this.addToCache(name, arkName);\r\n        return arkName;\r\n    }\r\n    private static addToCache(name: string, arkName: ArkName): void {\r\n        if(!this.nameCache[name]) {\r\n            this.nameCache[name] = arkName;\r\n        }\r\n    }\r\n}\r\ninterface HashMap {\r\n    [name:string]: ArkName;\r\n}","//import { Stream } from 'libvantage';\r\nimport { Stream } from 'libvantage';\r\n\r\nimport { GameObject } from './gameobject';\r\nimport { ArkArchive } from './arkArchive';\r\nimport { NameSizeCalculator } from './namesizecalculator';\r\nimport { BYTES } from './typesizes';\r\nimport { PropertyContainer } from './propertyContainer';\r\nimport { Property } from './properties/property';\r\n\r\nexport class ArkProfile extends PropertyContainer {\r\n    private version: number;\r\n\r\n    private numProfiles: number;\r\n\r\n    private objects: GameObject[];\r\n\r\n    private profile: GameObject;\r\n\r\n    constructor(archive: ArkArchive) {\r\n\r\n        super();\r\n\r\n        this.init();\r\n\r\n        this.readBinary(archive);\r\n    }\r\n\r\n    private init(): void {\r\n        this.objects = [];\r\n    }\r\n\r\n    private readBinary(archive: ArkArchive): void {\r\n\r\n        this.version = archive.getInt();\r\n\r\n        if(this.version !== 1) {\r\n            throw new Error('invalid ARK profile version detected');\r\n        }\r\n\r\n        this.numProfiles = archive.getInt();\r\n        for(let i = 0; i < this.numProfiles; i++) {\r\n            this.objects.push(new GameObject(archive));\r\n        }\r\n        for(let i = 0; i < this.numProfiles; i++) {\r\n            const object = this.objects[i];\r\n            if(object.getClassString() === 'PrimalPlayerData' || object.getClassString() === 'PrimalPlayerDataBP_C') {\r\n                this.profile = object;\r\n            }\r\n            object.loadProperties(archive, ((i < this.numProfiles - 1) ? this.objects[i+1] : null), 0);\r\n        } \r\n    }\r\n    public getProperties(): Property<any>[] {\r\n        return this.profile.getProperties();//properties;\r\n    }\r\n    public addProperty(property: any) {\r\n        this.profile.addProperty(property);\r\n    }\r\n    public save(): Buffer {\r\n        return this.writeBinary();\r\n    }\r\n    private writeBinary(): Buffer {\r\n\r\n        const nameSizer = ArkArchive.getNameSizer();\r\n        let size = BYTES.Integer * 2;\r\n        size += this.objects.map(o => o.getSize(nameSizer)).reduce((sum, curr) => sum + curr);\r\n\r\n        const archive = new ArkArchive(new Stream(Buffer.alloc(0x100)));\r\n\r\n        let propertiesBlockOffset = size;\r\n        archive.putInt(this.version);\r\n        archive.putInt(this.objects.length);\r\n\r\n        // store object list\r\n        for(let object of this.objects) {\r\n            propertiesBlockOffset = object.writeBinary(archive, propertiesBlockOffset);\r\n        }\r\n        // write each object's properies\r\n        for(let object of this.objects) {\r\n            object.writeProperties(archive, 0);\r\n        }\r\n        \r\n        return archive.toBuffer();\r\n    }\r\n}",null,"import { Stream } from 'libvantage';\r\nimport { readString, writeString } from '../util';\r\nimport { ArkArchive} from './arkArchive';\r\nimport { ArkName } from './arkName';\r\nimport { LocationData} from './types/locationData';\r\nimport { PropertyRegistry } from './properties/propertyRegistry';\r\nimport { Property } from './properties/property';\r\nimport { NameSizeCalculator } from './namesizecalculator';\r\nimport { ExtraDataRegistry } from './data/extraDataRegistry';\r\nimport { ExtraData } from './data/extraData';\r\nimport { BYTES } from './typesizes';\r\nimport { PropertyContainer } from './propertyContainer';\r\n\r\nexport class GameObject extends PropertyContainer {\r\n\r\n    private uuid: Buffer;\r\n    private className: ArkName;\r\n    private isItem: boolean;\r\n    private names: ArkName[];\r\n    private isFromDataFile: boolean;\r\n    private propertiesOffset: number;\r\n    private dataFileIndex: number;\r\n    private properties: Property<any>[];\r\n\r\n    private extraData: ExtraData;\r\n    private locationData: LocationData;\r\n\r\n    constructor(archive: ArkArchive) {\r\n        \r\n        super();\r\n        this.init();\r\n        this.readBinary(archive);\r\n    }\r\n    private init(): void {\r\n        this.names = [];\r\n    }\r\n    private readBinary(archive: ArkArchive) {\r\n\r\n        this.uuid = archive.getUuid();\r\n\r\n        this.className = archive.getName();\r\n\r\n        this.isItem = archive.getBoolean();\r\n\r\n        const nameCount = archive.getInt();\r\n        for(let x = 0; x < nameCount; x++) {\r\n            this.names.push(archive.getName());\r\n        }\r\n\r\n        this.isFromDataFile = archive.getBoolean();\r\n\r\n        this.dataFileIndex =  archive.getInt();\r\n        \r\n        const hasLocationData = archive.getBoolean();\r\n\r\n        if(hasLocationData) {\r\n            this.locationData = new LocationData(archive);\r\n        }\r\n\r\n        this.propertiesOffset = archive.getInt();\r\n        if(archive.getInt() !== 0) {\r\n            throw new Error('Expected a zero value at the end of the GameObject');\r\n        }\r\n    }\r\n\r\n    public loadProperties(archive: ArkArchive, nextObject: GameObject, offset: number): void {\r\n\r\n        archive.position = (this.propertiesOffset + offset);\r\n        let position = offset;\r\n        let nextOffset = (nextObject != null) ? this.propertiesOffset + nextObject.propertiesOffset : archive.limit();\r\n        this.properties = [];\r\n\r\n        try {\r\n            let property = PropertyRegistry.readBinary(archive);\r\n\r\n            while(property != null) {\r\n                position = archive.position;\r\n                this.properties.push(property);\r\n                property = PropertyRegistry.readBinary(archive);\r\n            }\r\n        }\r\n        catch {\r\n            console.log(\"Failed parsing at position: \"+ position);\r\n        }\r\n\r\n        const distance = nextOffset - archive.position;\r\n        \r\n        if(distance > 0) {\r\n            this.extraData = ExtraDataRegistry.getExtraData(this, archive, distance);\r\n        }\r\n    }\r\n    public getProperties(): Property<any>[] {\r\n        return this.properties;\r\n    }\r\n    public addProperty(property: any) {\r\n        this.properties.push(PropertyRegistry.createFrom(property.type, property.name, property.index, \r\n            property.value));\r\n    }\r\n    public writeBinary(archive: ArkArchive, offset: number): number {\r\n\r\n        if(this.uuid !== null) {\r\n            archive.putBytes(this.uuid);\r\n        }\r\n\r\n        archive.putName(this.className);\r\n        archive.putInt(this.isItem ? 1 : 0);\r\n        if(this.names !== null) {\r\n            archive.putInt(this.names.length);\r\n            this.names.forEach( n => archive.putName(n));\r\n        }\r\n        else {\r\n            archive.putInt(0);\r\n        }\r\n\r\n        archive.putInt(this.isFromDataFile? 1 : 0);\r\n        archive.putInt(this.dataFileIndex);\r\n\r\n        if(this.locationData) {\r\n            archive.putInt(1);\r\n            archive.putBytes(this.locationData.toBuffer());\r\n        }\r\n        else {\r\n            archive.putInt(0); // false\r\n        }\r\n\r\n        this.propertiesOffset = offset;\r\n        archive.putInt(this.propertiesOffset);\r\n        archive.putInt(0);\r\n\r\n        return this.propertiesOffset + offset;\r\n    }\r\n\r\n    public writeProperties(archive: ArkArchive, offset: number): number {\r\n        archive.position = this.propertiesOffset + offset;\r\n\r\n        if(this.properties != null) {\r\n            this.properties.forEach(p => p.writeBinary(archive));\r\n        }\r\n\r\n        archive.putName(ArkName.NAME_NONE);\r\n\r\n        if(this.extraData != null) {\r\n            this.extraData.writeBinary(archive);\r\n        }\r\n        else {\r\n            throw new Error(\"unsupported object with invalid ExtraData\");\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    public getSize(nameSizer: NameSizeCalculator): number {\r\n        let size = 16 + BYTES.Integer * 7;\r\n        size += nameSizer.sizeOf(this.className);\r\n        if(this.names) {\r\n            size += this.names.map(n => nameSizer.sizeOf(n)).reduce((sum, curr) => sum + curr);\r\n        }\r\n        if(this.locationData) {\r\n            size += this.locationData.getSize();\r\n        }\r\n        return size;\r\n    }\r\n\r\n    public toBuffer(): Buffer {\r\n        const io = Stream.reserve(500 * 1024);\r\n \r\n\r\n        return io.getBuffer();\r\n    }\r\n\r\n    public getClassString(): string {\r\n        return this.className ? this.className.toString() : null\r\n    }\r\n}",null,null,"import { ArkName } from './arkName';\r\nimport { ArkArchive } from './arkArchive';\r\n\r\n\r\nexport interface NameSizeCalculator {\r\n    sizeOf(name: ArkName): number;\r\n}\r\n\r\nexport class DefaultNameSizeCalculator {\r\n    public sizeOf(name: ArkName): number {\r\n        return ArkArchive.getStringLength(name.toString());\r\n    }\r\n}","import { Property } from './properties/property';\r\nimport { Stream } from 'libvantage';\r\n\r\nexport abstract class PropertyContainer implements Iterator<any> {\r\n\r\n    abstract getProperties(): Property<any>[];\r\n    abstract addProperty(property: any): void;\r\n\r\n    pointer: number = 0;\r\n\r\n    public getProperty(name: string, index?: number): Property<any> {\r\n        for(let prop of this.getProperties()) {\r\n            if(prop.getIndex() === (index || 0) && prop.getNameString() === name) {\r\n                return prop;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public getPropertyValue<T>(name: string, type?: any, index?: number): T {\r\n        for(let prop of this.getProperties()) {\r\n            if( (prop.getIndex() === (index || 0)) && (prop.getNameString() === name)\r\n        && (type ? ((typeof(type) == 'string' ? (typeof prop.getValue() == type) : (prop.getValue() instanceof type))) : true)) {\r\n                return <T>prop.getValue();\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    public setPropertyValue<T>(name: string, property?: any, type?: any, index?: number): void{\r\n        for(let prop of this.getProperties()) {\r\n            if( (prop.getIndex() === (index || 0)) && (prop.getNameString() === name)\r\n        && (type ? ((typeof(type) == 'string' ? (typeof prop.getValue() == type) : (prop.getValue() instanceof type))) : true)) {\r\n                prop.setValue(<T>property);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public setCreatePropertyValue<T>(name: string, property?: any, type?: any, index?: number): void{\r\n        for(let prop of this.getProperties()) {\r\n            if( (prop.getIndex() === (index || 0)) && (prop.getNameString() === name)) {\r\n                prop.setValue(<T>property);\r\n                return;\r\n            }\r\n        }\r\n        this.addProperty( {\r\n            name: name,\r\n            value: <T>property,\r\n            type: type,\r\n            index: index\r\n        })\r\n    } \r\n    public next(): IteratorResult<any> {\r\n        const props = this.getProperties();\r\n        if (this.pointer < props.length) {\r\n            return {\r\n                done: false,\r\n                value: props[this.pointer++]\r\n            }\r\n        }\r\n        else {\r\n          return {\r\n            done: true,\r\n            value: null\r\n          }\r\n        }\r\n    }\r\n}","\r\nexport enum Types {\r\n    ByteBYTES = 1,\r\n    ShortBYTES = 2,\r\n    IntegerBYTES = 4,\r\n    FloatBYTES = 4,\r\n    DoubleBYTES = 8,\r\n    LongBYTES = 8,\r\n}\r\n\r\nexport enum BYTES {\r\n    Byte = 1,\r\n    Boolean = 1,\r\n    Short = 2,\r\n    Integer = 4,\r\n    Float = 4,\r\n    Double = 8,\r\n    Long = 8,\r\n}","import { NameContainer } from '../namecontainer';\r\nimport { ArkName } from '../arkName';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport { NameSizeCalculator } from '../namesizecalculator';\r\nimport { NameCollector } from '../namecollector';\r\n\r\nexport abstract class ArkArray<T> extends Array<T> {\r\n\r\n    abstract getType(): ArkName;\r\n\r\n    abstract setValue(value: T): void;\r\n    \r\n    abstract calculateSize(nameSizer?: NameSizeCalculator): number;\r\n\r\n    abstract writeBinary(archive: ArkArchive): void;\r\n}",null,"import { Byte, Bool } from '../basetypes';\r\nimport { ArkName } from '../arkName';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport { PropertyArray } from '../properties/propertyArray';\r\nimport { ArkArray } from './arkArray';\r\nimport { NameSizeCalculator } from '../namesizecalculator';\r\nimport { NameCollector } from '../namecollector';\r\nimport { BYTES } from '../typesizes';\r\n\r\nexport class ArkArrayBool extends ArkArray<Bool> {\r\n\r\n    public static TYPE = ArkName.constantPlain(\"BoolProperty\");\r\n  \r\n    constructor(archive: ArkArchive, property: PropertyArray) {\r\n        super();\r\n\r\n        const size = archive.getInt();\r\n        for(let n = 0; n < size; n++) {\r\n            this.push(archive.getByte() !== 0);\r\n        }\r\n        Object.setPrototypeOf(this, ArkArrayBool.prototype);\r\n    }\r\n    public static create(archive: ArkArchive, property: PropertyArray): ArkArrayBool {\r\n        return new ArkArrayBool(archive, property);\r\n    }\r\n    public getType(): ArkName {\r\n        return ArkArrayBool.TYPE;\r\n    }\r\n    public setValue(object: any): void {\r\n\r\n    }\r\n    public writeBinary(archive: ArkArchive): void {\r\n        archive.putInt(this.length);\r\n\r\n        this.forEach(element => archive.putByte((element.valueOf() ? 1 : 0)));\r\n    }\r\n    public calculateSize(): number {\r\n        return BYTES.Integer + (this.length * BYTES.Byte);\r\n    }\r\n}","\r\nimport { ArkName } from '../arkName';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport {Integer, Primitive, Byte} from '../basetypes'\r\nimport { NameSizeCalculator } from '../namesizecalculator';\r\nimport { BYTES } from '../typesizes';\r\nimport { Struct } from '../structs/struct';\r\nimport { NameCollector } from '../namecollector';\r\nimport { StructRegistry } from '../structs/structRegistry';\r\nimport { ArkByteValue } from '../types/arkByteValue';\r\nimport { ArkArrayUInt8 } from './arkArrayUInt8';\r\nimport { PropertyArray } from '../properties/propertyArray';\r\nimport { ArkArray } from './arkArray';\r\nimport { arch } from 'os';\r\nimport { ArkArrayByteValue } from './arkArrayByteValue';\r\n\r\nexport class ArkArrayByteHandler {\r\n\r\n    public static TYPE: ArkName = ArkName.constantPlain('ByteProperty');\r\n\r\n    public static create(archive: ArkArchive, property: PropertyArray): ArkArray<ArkByteValue|Byte> {\r\n\r\n        const size = archive.getInt();\r\n\r\n        if(property.getDataSize() < size + 4) {\r\n            throw new Error(\"Found Array of ByteProperty with unexpected size.\");\r\n        }\r\n        \r\n        archive.position -= 4;\r\n        if(property.getDataSize() > (size + 4)) {\r\n            return new ArkArrayByteValue(archive, property);\r\n        }\r\n        else {\r\n            return new ArkArrayUInt8(archive, property);\r\n        }\r\n    }\r\n}","import { Integer, Long } from '../basetypes';\r\nimport { ArkName } from '../arkName';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport { PropertyArray } from '../properties/propertyArray';\r\nimport { ArkArray } from './arkArray';\r\nimport { NameSizeCalculator } from '../namesizecalculator';\r\nimport { NameCollector } from '../namecollector';\r\nimport { ArkByteValue } from '../types/arkByteValue';\r\nimport { ArkArrayByteHandler } from './arkArrayByteHandler';\r\nimport { BYTES } from '../typesizes';\r\n\r\nexport class ArkArrayByteValue extends ArkArray<ArkByteValue> {\r\n  \r\n    constructor(archive: ArkArchive, property: PropertyArray) {\r\n        super();\r\n\r\n        const size = archive.getInt();\r\n        for(let n = 0; n < size; n++) {\r\n            this.push(new ArkByteValue(null, null, archive.getName()));\r\n        }\r\n        Object.setPrototypeOf(this, ArkArrayByteValue.prototype);\r\n\r\n    }\r\n    public static create(archive: ArkArchive, property: PropertyArray): ArkArrayByteValue {\r\n        return new ArkArrayByteValue(archive, property);\r\n    }\r\n    \r\n    public getType(): ArkName {\r\n        return ArkArrayByteHandler.TYPE;\r\n    }\r\n\r\n    public setValue(object: any): void {\r\n\r\n    }\r\n    public writeBinary(archive: ArkArchive): void {\r\n        archive.putInt(this.length);\r\n\r\n        this.forEach(element => archive.putName(element.NameValue));\r\n    }\r\n    public calculateSize(nameSizer: NameSizeCalculator): number {\r\n        return BYTES.Integer + (this.reduce( (a, p) => (a + nameSizer.sizeOf(p.NameValue)), 0));\r\n    }\r\n}","import { Double } from '../basetypes';\r\nimport { ArkName } from '../arkName';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport { PropertyArray } from '../properties/propertyArray';\r\nimport { ArkArray } from './arkArray';\r\nimport { NameSizeCalculator } from '../namesizecalculator';\r\nimport { NameCollector } from '../namecollector';\r\nimport { BYTES } from '../typesizes';\r\n\r\nexport class ArkArrayDouble extends ArkArray<Double> {\r\n\r\n    public static TYPE = ArkName.constantPlain(\"DoubleProperty\");\r\n  \r\n    constructor(archive: ArkArchive, property: PropertyArray) {\r\n        super();\r\n\r\n        const size = archive.getInt();\r\n        for(let n = 0; n < size; n++) {\r\n            this.push(archive.getDouble());\r\n        }\r\n        Object.setPrototypeOf(this, ArkArrayDouble.prototype);\r\n    }\r\n\r\n    public static create(archive: ArkArchive, property: PropertyArray): ArkArrayDouble {\r\n        return new ArkArrayDouble(archive, property);\r\n    }\r\n    \r\n    public getType(): ArkName {\r\n        return ArkArrayDouble.TYPE;\r\n    }\r\n\r\n    public setValue(object: number): void {\r\n   \r\n    }\r\n\r\n    public writeBinary(archive: ArkArchive): void {\r\n        archive.putInt(this.length);\r\n\r\n        this.forEach(element => archive.putDouble(element as number));\r\n    }\r\n\r\n    public calculateSize(nameSizer: NameSizeCalculator): number {\r\n        return BYTES.Integer + (this.length * BYTES.Double);\r\n    }\r\n}","import { Float } from '../basetypes';\r\nimport { ArkName } from '../arkName';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport { PropertyArray } from '../properties/propertyArray';\r\nimport { ArkArray } from './arkArray';\r\nimport { NameSizeCalculator } from '../namesizecalculator';\r\nimport { NameCollector } from '../namecollector';\r\nimport { BYTES } from '../typesizes';\r\n\r\nexport class ArkArrayFloat extends ArkArray<Float> {\r\n\r\n    public static TYPE = ArkName.constantPlain(\"FloatProperty\");\r\n  \r\n    constructor(archive: ArkArchive, property: PropertyArray) {\r\n        super();\r\n\r\n        const size = archive.getInt();\r\n        for(let n = 0; n < size; n++) {\r\n            this.push(archive.getFloat());\r\n        }\r\n        Object.setPrototypeOf(this, ArkArrayFloat.prototype);\r\n\r\n    }\r\n    public static create(archive: ArkArchive, property: PropertyArray): ArkArrayFloat {\r\n        return new ArkArrayFloat(archive, property);\r\n    }\r\n    \r\n    public getType(): ArkName {\r\n        return ArkArrayFloat.TYPE;\r\n    }\r\n\r\n    public setValue(object: number): void {\r\n   \r\n    }\r\n\r\n    public writeBinary(archive: ArkArchive): void {\r\n        archive.putInt(this.length);\r\n\r\n        this.forEach(element => archive.putFloat(element as number));\r\n    }\r\n\r\n    public calculateSize(nameSizer: NameSizeCalculator): number {\r\n        return BYTES.Integer + (this.length * BYTES.Float);\r\n    }\r\n}","import { Integer } from '../basetypes';\r\nimport { ArkName } from '../arkName';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport { PropertyArray } from '../properties/propertyArray';\r\nimport { ArkArray } from './arkArray';\r\nimport { NameSizeCalculator } from '../namesizecalculator';\r\nimport { NameCollector } from '../namecollector';\r\n\r\nexport class ArkArrayInt extends ArkArray<Integer> {\r\n\r\n    public static TYPE = ArkName.constantPlain(\"IntProperty\");\r\n  \r\n    constructor(archive: ArkArchive, property: PropertyArray) {\r\n        super();\r\n\r\n        const size = archive.getInt();\r\n        for(let n = 0; n < size; n++) {\r\n            this.push(archive.getInt());\r\n        }\r\n        Object.setPrototypeOf(this, ArkArrayInt.prototype);\r\n\r\n    }\r\n    public static create(archive: ArkArchive, property: PropertyArray): ArkArrayInt {\r\n        return new ArkArrayInt(archive, property);\r\n    }\r\n    \r\n    public getType(): ArkName {\r\n        return ArkArrayInt.TYPE;\r\n    }\r\n\r\n    public setValue(object: number): void {\r\n\r\n    }\r\n    public writeBinary(archive: ArkArchive): void {\r\n        archive.putInt(this.length);\r\n\r\n        this.forEach(element => archive.putInt(element as number));\r\n    }\r\n    public calculateSize(nameSizer: NameSizeCalculator): number {\r\n        return 0;\r\n    }\r\n}","import { Integer } from '../basetypes';\r\nimport { ArkName } from '../arkName';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport { PropertyArray } from '../properties/propertyArray';\r\nimport { ArkArray } from './arkArray';\r\nimport { NameSizeCalculator } from '../namesizecalculator';\r\nimport { NameCollector } from '../namecollector';\r\nimport { BYTES } from '../typesizes';\r\n\r\nexport class ArkArrayInt16 extends ArkArray<Integer> {\r\n\r\n    public static TYPE = ArkName.constantPlain(\"Int16Property\");\r\n  \r\n    constructor(archive: ArkArchive, property: PropertyArray) {\r\n        super();\r\n\r\n        const size = archive.getInt();\r\n        for(let n = 0; n < size; n++) {\r\n            this.push(archive.getShort());\r\n        }\r\n        Object.setPrototypeOf(this, ArkArrayInt16.prototype);\r\n\r\n    }\r\n    public static create(archive: ArkArchive, property: PropertyArray): ArkArrayInt16 {\r\n        return new ArkArrayInt16(archive, property);\r\n    }\r\n    \r\n    public getType(): ArkName {\r\n        return ArkArrayInt16.TYPE;\r\n    }\r\n\r\n    public setValue(object: number): void {\r\n\r\n    }\r\n    public writeBinary(archive: ArkArchive): void {\r\n        archive.putInt(this.length);\r\n\r\n        this.forEach(element => archive.putShort(element as number));\r\n    }\r\n    public calculateSize(nameSizer: NameSizeCalculator): number {\r\n        return BYTES.Integer + (this.length * BYTES.Short);\r\n    }\r\n}","import { Integer, Long } from '../basetypes';\r\nimport { ArkName } from '../arkName';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport { PropertyArray } from '../properties/propertyArray';\r\nimport { ArkArray } from './arkArray';\r\nimport { NameSizeCalculator } from '../namesizecalculator';\r\nimport { NameCollector } from '../namecollector';\r\nimport { BYTES } from '../typesizes';\r\n\r\nexport class ArkArrayInt64 extends ArkArray<Long> {\r\n\r\n    public static TYPE = ArkName.constantPlain(\"Int64Property\");\r\n  \r\n    constructor(archive: ArkArchive, property: PropertyArray) {\r\n        super();\r\n\r\n        const size = archive.getInt();\r\n        for(let n = 0; n < size; n++) {\r\n            this.push(archive.getLong());\r\n        }\r\n        Object.setPrototypeOf(this, ArkArrayInt64.prototype);\r\n\r\n    }\r\n    public static create(archive: ArkArchive, property: PropertyArray): ArkArrayInt64 {\r\n        return new ArkArrayInt64(archive, property);\r\n    }\r\n    \r\n    public getType(): ArkName {\r\n        return ArkArrayInt64.TYPE;\r\n    }\r\n\r\n    public setValue(object: Long): void {\r\n        \r\n    }\r\n    public writeBinary(archive: ArkArchive): void {\r\n        archive.putInt(this.length);\r\n\r\n        this.forEach(element => archive.putLong(element));\r\n    }\r\n    public calculateSize(nameSizer: NameSizeCalculator): number {\r\n        return BYTES.Integer + (this.length * BYTES.Long);\r\n    }\r\n}","import { Byte } from '../basetypes';\r\nimport { ArkName } from '../arkName';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport { PropertyArray } from '../properties/propertyArray';\r\nimport { ArkArray } from './arkArray';\r\nimport { NameSizeCalculator } from '../namesizecalculator';\r\nimport { NameCollector } from '../namecollector';\r\nimport { BYTES } from '../typesizes';\r\n\r\nexport class ArkArrayInt8 extends ArkArray<Byte> {\r\n\r\n    public static TYPE = ArkName.constantPlain(\"Int8Property\");\r\n  \r\n    constructor(archive: ArkArchive, property: PropertyArray) {\r\n        super();\r\n\r\n        const size = archive.getInt();\r\n        for(let n = 0; n < size; n++) {\r\n            this.push(archive.getByte());\r\n        }\r\n        Object.setPrototypeOf(this, ArkArrayInt8.prototype);\r\n    }\r\n    public static create(archive: ArkArchive, property: PropertyArray): ArkArrayInt8 {\r\n        return new ArkArrayInt8(archive, property);\r\n    }\r\n    public getType(): ArkName {\r\n        return ArkArrayInt8.TYPE;\r\n    }\r\n    public setValue(object: number): void {\r\n\r\n    }\r\n    public writeBinary(archive: ArkArchive): void {\r\n        archive.putInt(this.length);\r\n\r\n        this.forEach(element => archive.putByte(element as number));\r\n    }\r\n    public calculateSize(): number {\r\n        return BYTES.Integer + (this.length * BYTES.Byte);\r\n    }\r\n}","import { Integer } from '../basetypes';\r\nimport { ArkName } from '../arkName';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport { PropertyArray } from '../properties/propertyArray';\r\nimport { ArkArray } from './arkArray';\r\nimport { NameSizeCalculator } from '../namesizecalculator';\r\nimport { NameCollector } from '../namecollector';\r\nimport { BYTES } from '../typesizes';\r\n\r\nexport class ArkArrayName extends ArkArray<ArkName> {\r\n\r\n    public static TYPE = ArkName.constantPlain(\"NameProperty\");\r\n  \r\n    constructor(archive: ArkArchive, property: PropertyArray) {\r\n        super();\r\n\r\n        const size = archive.getInt();\r\n        for(let n = 0; n < size; n++) {\r\n            this.push(archive.getName());\r\n        }\r\n        Object.setPrototypeOf(this, ArkArrayName.prototype);\r\n\r\n    }\r\n    public static create(archive: ArkArchive, property: PropertyArray): ArkArrayName {\r\n        return new ArkArrayName(archive, property);\r\n    }    \r\n    public getType(): ArkName {\r\n        return ArkArrayName.TYPE;\r\n    }\r\n    public setValue(object: ArkName): void {\r\n\r\n    }\r\n    public writeBinary(archive: ArkArchive): void {\r\n        archive.putInt(this.length);\r\n\r\n        this.forEach(element => archive.putName(element));\r\n    }\r\n    public calculateSize(nameSizer: NameSizeCalculator): number {\r\n        return BYTES.Integer + (this.reduce((a, p) => (a + nameSizer.sizeOf(p)), 0));\r\n    }\r\n}","import { ObjectReference } from '../types/objectReference';\r\nimport { ArkArray } from './arkArray';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport { NameSizeCalculator } from '../namesizecalculator';\r\nimport { ArkName } from '../arkName';\r\nimport { NameCollector } from '../namecollector';\r\nimport { PropertyArray } from '../properties/propertyArray';\r\nimport { BYTES } from '../typesizes';\r\n\r\nexport class ArkArrayObjectReference extends ArkArray<ObjectReference> {\r\n\r\n    public static TYPE = ArkName.constantPlain(\"ObjectProperty\");\r\n  \r\n    constructor(archive: ArkArchive, property: PropertyArray) {\r\n        super();\r\n\r\n        const size = archive.getInt();\r\n        for(let n = 0; n < size; n++) {\r\n            this.push(new ObjectReference(archive, 8));\r\n        }\r\n        Object.setPrototypeOf(this, ArkArrayObjectReference.prototype);\r\n    }\r\n    public static create(archive: ArkArchive, property: PropertyArray): ArkArrayObjectReference {\r\n        return new ArkArrayObjectReference(archive, property);\r\n    }\r\n    \r\n    public getType(): ArkName {\r\n        return ArkArrayObjectReference.TYPE;\r\n    }\r\n    public getValue(): ArkName {\r\n        return ArkArrayObjectReference.TYPE;\r\n    }\r\n    public setValue(object: ObjectReference): void {\r\n\r\n    }\r\n    public writeBinary(archive: ArkArchive): void {\r\n        archive.putInt(this.length);\r\n        this.forEach(p=> p.writeBinary(archive));\r\n    }\r\n    public calculateSize(nameSizer: NameSizeCalculator): number {\r\n        return BYTES.Integer + (this.reduce((a, p) => (a + p.getSize(nameSizer)), 0));\r\n    }\r\n    public collectNames(collector: NameCollector): void {\r\n        this.forEach(element => {\r\n            element.collectNames(collector);\r\n        });\r\n    }    \r\n}","\r\nimport { ArkArrayObjectReference } from './arkArrayObjectReference';\r\nimport { ArkArrayBinaryConstructor } from './arkArrayBinaryConstructor';\r\n\r\nimport { PropertyArray } from '../properties/propertyArray';\r\nimport { ArkName } from '../arkName';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport { ArkArray } from './arkArray';\r\nimport { ArkArrayInt } from './arkArrayInt';\r\nimport { ArkArrayFloat } from './arkArrayFloat';\r\nimport { ArkArrayInt64 } from './arkArrayInt64';\r\nimport { ArkArrayUInt64 } from './arkArrayUInt64';\r\nimport { ArkArrayInt16 } from './arkArrayInt16';\r\nimport { ArkArrayUInt32 } from './arkArrayUInt32';\r\nimport { ArkArrayName } from './arkArrayName';\r\nimport { ArkArrayUInt16 } from './arkArrayUInt16';\r\nimport { ArkArrayInt8 } from './arkArrayInt8';\r\nimport { ArkArrayByteHandler } from './arkArrayByteHandler';\r\nimport { ArkArrayDouble } from './arkArrayDouble';\r\nimport { ArkArrayBool } from './arkArrayBool';\r\nimport { ArkArrayString } from './arkArrayString';\r\nimport { ArkArrayStruct } from './arkArrayStruct';\r\n\r\n\r\nexport class ArkArrayRegistry {\r\n\r\n    public static TYPE_MAP: BinaryHashMap[] = [];\r\n    //public static TYPE_JSON_MAP: JsonHashMap[] = [];\r\n\r\n    public static addStruct(name: ArkName, binary: ArkArrayBinaryConstructor, json?: any): void {\r\n        this.TYPE_MAP[name.toString()] = binary;\r\n    }\r\n    static construct() {\r\n        this.addStruct(ArkArrayInt8.TYPE, ArkArrayInt8.create);\r\n        this.addStruct(ArkArrayByteHandler.TYPE, ArkArrayByteHandler.create);        \r\n        this.addStruct(ArkArrayInt16.TYPE, ArkArrayInt16.create);\r\n        this.addStruct(ArkArrayUInt16.TYPE, ArkArrayUInt16.create);  \r\n        this.addStruct(ArkArrayInt.TYPE, ArkArrayInt.create);                      \r\n        this.addStruct(ArkArrayUInt32.TYPE, ArkArrayUInt32.create);        \r\n        this.addStruct(ArkArrayInt64.TYPE, ArkArrayInt64.create);        \r\n        this.addStruct(ArkArrayUInt64.TYPE, ArkArrayUInt64.create);\r\n        this.addStruct(ArkArrayFloat.TYPE, ArkArrayFloat.create);\r\n        this.addStruct(ArkArrayDouble.TYPE, ArkArrayDouble.create);\r\n        this.addStruct(ArkArrayBool.TYPE, ArkArrayBool.create);\r\n        this.addStruct(ArkArrayString.TYPE, ArkArrayString.create);\r\n        this.addStruct(ArkArrayName.TYPE, ArkArrayName.create);\r\n        this.addStruct(ArkArrayObjectReference.TYPE, ArkArrayObjectReference.create);\r\n        this.addStruct(ArkArrayStruct.TYPE, ArkArrayStruct.create);\r\n        \r\n    }\r\n    public static readBinary(archive: ArkArchive, arrayType: ArkName, property: PropertyArray): ArkArray<any> {\r\n\r\n        if(this.TYPE_MAP[arrayType.toString()]) {\r\n            return this.TYPE_MAP[arrayType.toString()](archive, property);\r\n        }\r\n        else{\r\n            throw new Error(\"Unknown struct type\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface BinaryHashMap {\r\n    [name:string]: ArkArrayBinaryConstructor;\r\n}\r\ninterface JsonHashMap {\r\n    [name:string]: any;\r\n}","import { ArkName } from '../arkName';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport { PropertyArray } from '../properties/propertyArray';\r\nimport { ArkArray } from './arkArray';\r\nimport { NameSizeCalculator } from '../namesizecalculator';\r\nimport { NameCollector } from '../namecollector';\r\n\r\nexport class ArkArrayString extends ArkArray<string> {\r\n\r\n    public static TYPE = ArkName.constantPlain(\"StrProperty\");\r\n  \r\n    constructor(archive: ArkArchive, property: PropertyArray) {\r\n        super();\r\n\r\n        const size = archive.getInt();\r\n        for(let n = 0; n < size; n++) {\r\n            this.push(archive.getString());\r\n        }\r\n        Object.setPrototypeOf(this, ArkArrayString.prototype);\r\n    }\r\n    \r\n    public static create(archive: ArkArchive, property: PropertyArray): ArkArrayString {\r\n        return new ArkArrayString(archive, property);\r\n    }\r\n    \r\n    public getType(): ArkName {\r\n        return ArkArrayString.TYPE;\r\n    }\r\n\r\n    public setValue(object: string): void {\r\n   \r\n    }\r\n\r\n    public writeBinary(archive: ArkArchive): void {\r\n        archive.putInt(this.length);\r\n\r\n        this.forEach(element => archive.putString(element));\r\n    }\r\n\r\n    public calculateSize(nameSizer: NameSizeCalculator): number {\r\n        return this.reduce((a, p) => (a + ArkArchive.getStringLength(p)), 0);\r\n    }\r\n}","import { ArkName } from '../arkName';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport { PropertyArray } from '../properties/propertyArray';\r\nimport { ArkArray } from './arkArray';\r\nimport { NameSizeCalculator } from '../namesizecalculator';\r\nimport { NameCollector } from '../namecollector';\r\nimport { Struct } from '../structs/struct';\r\n\r\nexport class ArkArrayStruct extends ArkArray<Struct> {\r\n    public static TYPE = ArkName.constantPlain(\"StructProperty\");\r\n  \r\n    constructor(archive: ArkArchive, property: PropertyArray) {\r\n        super();\r\n\r\n        const size = archive.getInt();\r\n        for(let n = 0; n < size; n++) {\r\n            // fill in\r\n        }\r\n        Object.setPrototypeOf(this, ArkArrayStruct.prototype);\r\n    }\r\n    \r\n    public static create(archive: ArkArchive, property: PropertyArray): ArkArrayStruct {\r\n        return new ArkArrayStruct(archive, property);\r\n    }\r\n    \r\n    public getType(): ArkName {\r\n        return ArkArrayStruct.TYPE;\r\n    }\r\n\r\n    public setValue(object: any): void {\r\n   \r\n    }\r\n\r\n    public writeBinary(archive: ArkArchive): void {\r\n        archive.putInt(this.length);\r\n\r\n        //this.forEach(element => );\r\n    }\r\n\r\n    public calculateSize(nameSizer: NameSizeCalculator): number {\r\n        return 0;\r\n    }\r\n}","import { Short } from '../basetypes';\r\nimport { ArkName } from '../arkName';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport { PropertyArray } from '../properties/propertyArray';\r\nimport { ArkArray } from './arkArray';\r\nimport { NameSizeCalculator } from '../namesizecalculator';\r\nimport { NameCollector } from '../namecollector';\r\nimport { BYTES } from '../typesizes';\r\n\r\nexport class ArkArrayUInt16 extends ArkArray<Short> {\r\n\r\n    public static TYPE = ArkName.constantPlain(\"UInt16Property\");\r\n  \r\n    constructor(archive: ArkArchive, property: PropertyArray) {\r\n        super();\r\n\r\n        const size = archive.getInt();\r\n        for(let n = 0; n < size; n++) {\r\n            this.push(archive.getUShort());\r\n        }\r\n        Object.setPrototypeOf(this, ArkArrayUInt16.prototype);\r\n\r\n    }\r\n    public static create(archive: ArkArchive, property: PropertyArray): ArkArrayUInt16 {\r\n        return new ArkArrayUInt16(archive, property);\r\n    }\r\n    \r\n    public getType(): ArkName {\r\n        return ArkArrayUInt16.TYPE;\r\n    }\r\n\r\n    public setValue(object: number): void {\r\n\r\n    }\r\n    public writeBinary(archive: ArkArchive): void {\r\n        archive.putInt(this.length);\r\n\r\n        this.forEach(element => archive.putUShort(element as number));\r\n    }\r\n    public calculateSize(nameSizer: NameSizeCalculator): number {\r\n        return BYTES.Integer + (this.length * BYTES.Short);\r\n    }\r\n}","import { Integer } from '../basetypes';\r\nimport { ArkName } from '../arkName';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport { PropertyArray } from '../properties/propertyArray';\r\nimport { ArkArray } from './arkArray';\r\nimport { NameSizeCalculator } from '../namesizecalculator';\r\nimport { NameCollector } from '../namecollector';\r\nimport { BYTES } from '../typesizes';\r\n\r\nexport class ArkArrayUInt32 extends ArkArray<Integer> {\r\n\r\n    public static TYPE = ArkName.constantPlain(\"UInt32Property\");\r\n  \r\n    constructor(archive: ArkArchive, property: PropertyArray) {\r\n        super();\r\n\r\n        const size = archive.getInt();\r\n        for(let n = 0; n < size; n++) {\r\n            this.push(archive.getUInt());\r\n        }\r\n        Object.setPrototypeOf(this, ArkArrayUInt32.prototype);\r\n\r\n    }\r\n    public static create(archive: ArkArchive, property: PropertyArray): ArkArrayUInt32 {\r\n        return new ArkArrayUInt32(archive, property);\r\n    }\r\n    \r\n    public getType(): ArkName {\r\n        return ArkArrayUInt32.TYPE;\r\n    }\r\n\r\n    public setValue(object: number): void {\r\n\r\n    }\r\n    public writeBinary(archive: ArkArchive): void {\r\n        archive.putInt(this.length);\r\n\r\n        this.forEach(element => archive.putUInt(element as number));\r\n    }\r\n    public calculateSize(nameSizer: NameSizeCalculator): number {\r\n        return BYTES.Integer + (this.length * BYTES.Integer);\r\n    }\r\n}","import { Integer, Long } from '../basetypes';\r\nimport { ArkName } from '../arkName';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport { PropertyArray } from '../properties/propertyArray';\r\nimport { ArkArray } from './arkArray';\r\nimport { NameSizeCalculator } from '../namesizecalculator';\r\nimport { NameCollector } from '../namecollector';\r\nimport { BYTES } from '../typesizes';\r\n\r\nexport class ArkArrayUInt64 extends ArkArray<Long> {\r\n\r\n    public static TYPE = ArkName.constantPlain(\"UInt64Property\");\r\n  \r\n    constructor(archive: ArkArchive, property: PropertyArray) {\r\n        super();\r\n\r\n        const size = archive.getInt();\r\n        for(let n = 0; n < size; n++) {\r\n            this.push(archive.getULong());\r\n        }\r\n        Object.setPrototypeOf(this, ArkArrayUInt64.prototype);\r\n\r\n    }\r\n    public static create(archive: ArkArchive, property: PropertyArray): ArkArrayUInt64 {\r\n        return new ArkArrayUInt64(archive, property);\r\n    }\r\n    \r\n    public getType(): ArkName {\r\n        return ArkArrayUInt64.TYPE;\r\n    }\r\n\r\n    public setValue(object: Long): void {\r\n\r\n    }\r\n    public writeBinary(archive: ArkArchive): void {\r\n        archive.putInt(this.length);\r\n\r\n        this.forEach(element => archive.putULong(element));\r\n    }\r\n    public calculateSize(nameSizer: NameSizeCalculator): number {\r\n        return BYTES.Integer + (this.length * BYTES.Long);\r\n    }\r\n}","import { Integer } from '../basetypes';\r\nimport { ArkName } from '../arkName';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport { PropertyArray } from '../properties/propertyArray';\r\nimport { ArkArray } from './arkArray';\r\nimport { NameSizeCalculator } from '../namesizecalculator';\r\nimport { NameCollector } from '../namecollector';\r\nimport { BYTES } from '../typesizes';\r\nimport { ArkArrayInt8 } from './arkArrayInt8';\r\nimport { ArkArrayByteHandler } from './arkArrayByteHandler';\r\n\r\nexport class ArkArrayUInt8 extends ArkArrayInt8 {\r\n \r\n    constructor(archive: ArkArchive, property: PropertyArray) {\r\n        super(archive, property);\r\n\r\n        Object.setPrototypeOf(this, ArkArrayUInt8.prototype);\r\n    }\r\n    public static create(archive: ArkArchive, property: PropertyArray): ArkArrayUInt8 {\r\n        return new ArkArrayUInt8(archive, property);\r\n    }\r\n    public getType(): ArkName {\r\n        return ArkArrayByteHandler.TYPE;\r\n    }\r\n}",null,"import { ExtraDataHandler } from './extraDataHandler';\r\nimport { GameObject } from '../gameobject';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport { ExtraData } from './extraData';\r\n\r\n\r\nexport class ExtraDataFallbackHandler implements ExtraDataHandler {\r\n\r\n    canHandle(object: GameObject, length: number): boolean {\r\n        return false;\r\n    }\r\n\r\n    readBinary(object: GameObject, archive: ArkArchive, length: number): ExtraData {\r\n\r\n        return null;\r\n    }\r\n}",null,"import { ExtraDataFallbackHandler } from './extraDataFallbackHandler';\r\nimport { ExtraDataZeroHandler } from './extraDataZeroHandler';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport { ExtraData } from './extraData';\r\nimport { ExtraDataHandler } from './extraDataHandler';\r\nimport { GameObject } from '../gameobject';\r\n\r\nexport class ExtraDataRegistry {\r\n\r\n    /*\r\n    public static TYPE_MAP1 = {\r\n        PropertyInt : PropertyInt\r\n    };\r\n        public static TYPE_MAP2 = {\r\n        PropertyInt : PropertyInt\r\n    };\r\n    */\r\n  //  public static TYPE_MAP3: any = {};\r\n    //public static EXTRA_DATA_FALLBACK_HANDLER: ExtraDataFallbackHandler[] = [];\r\n    public static EXTRA_DATA_HANDLERS: ExtraDataHandler[] = [];\r\n\r\n    public static addHandler(binary: ExtraDataHandler): void {\r\n        this.EXTRA_DATA_HANDLERS.push(binary);\r\n    }\r\n   \r\n    static construct() {\r\n        this.addHandler(new ExtraDataZeroHandler);\r\n    }\r\n    public static getExtraData(object: GameObject, archive: ArkArchive, length: number): ExtraData {\r\n        const position = archive.position;\r\n\r\n        try {\r\n            for(let i = ExtraDataRegistry.EXTRA_DATA_HANDLERS.length - 1; i >= 0; i--) {\r\n                const handler = ExtraDataRegistry.EXTRA_DATA_HANDLERS[i];\r\n                if(handler.canHandle(object, length)) {\r\n                    return handler.readBinary(object, archive, length);\r\n                }\r\n            }\r\n        }\r\n        catch {\r\n            throw new Error(\"error extra data\");\r\n        }\r\n\r\n        return null;\r\n    }\r\n}\r\n","import { ExtraData } from './extraData';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport { NameSizeCalculator } from '../namesizecalculator';\r\n\r\nexport class ExtraDataZero implements ExtraData {\r\n    public calculateSize(nameSizer: NameSizeCalculator): number {\r\n        return 4;\r\n    }\r\n\r\n    public writeBinary(archive: ArkArchive): void {\r\n        archive.putInt(0);\r\n    }\r\n}","import { ExtraDataHandler } from './extraDataHandler';\r\nimport { ExtraDataZero } from './extraDataZero';\r\nimport { GameObject } from '../gameobject';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport { ExtraData } from './extraData';\r\n\r\nexport class ExtraDataZeroHandler implements ExtraDataHandler {\r\n\r\n    // instance will always be the same so need only one\r\n    public static INSTANCE: ExtraDataZero = new ExtraDataZero();\r\n\r\n    public canHandle(objet: GameObject, length: number): boolean {\r\n        return length === 4;\r\n    }\r\n    public readBinary(object: GameObject, archive: ArkArchive, length: number): ExtraData {\r\n        const shouldBeZero = archive.getInt();\r\n        if(shouldBeZero !== 0) {\r\n            throw new Error(\"Unexpected value, expected zero\");\r\n        }\r\n\r\n        return ExtraDataZeroHandler.INSTANCE;\r\n    }\r\n}","import { NameContainer } from '../namecontainer';\r\nimport { NameCollector } from '../namecollector';\r\nimport { ArkName } from '../arkName';\r\nimport { NameSizeCalculator } from '../namesizecalculator';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport { Primitive } from '../basetypes'\r\n\r\nexport abstract class Property<T> implements NameContainer {\r\n\r\n    //abstract getValueClass(): Primitive; // typeof(T)\r\n    abstract collectNames(nameCollector: NameCollector): void;\r\n    abstract getName(): ArkName;\r\n    abstract getNameString(): string;\r\n\r\n    abstract setName(name: ArkName): void;\r\n    abstract setNameString(nameString: string): void;\r\n\r\n    abstract getType(): ArkName;\r\n    abstract getTypeString(): string;\r\n\r\n    abstract getDataSize(): number;\r\n    abstract setDataSize(length: number);\r\n\r\n    abstract getIndex(): number;\r\n    abstract setIndex(index: number): void;\r\n\r\n    abstract getValue(): T;\r\n    abstract setValue(value: T): void;\r\n    \r\n    abstract calculateDataSize(nameSizer?: NameSizeCalculator): number;\r\n    abstract calculateSize(nameSizer: NameSizeCalculator): number;\r\n\r\n    abstract writeBinary(archive: ArkArchive): void;\r\n}","\r\nimport {PropertyBase} from './propertyBase';\r\nimport { ArkName } from '../arkName';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport {Integer, Primitive} from '../basetypes'\r\nimport { NameSizeCalculator } from '../namesizecalculator';\r\nimport { BYTES } from '../typesizes';\r\nimport { PropertyBinaryConstructor} from './propertyBinaryConstructor';\r\nimport { Struct } from '../structs/struct';\r\nimport { NameCollector } from '../namecollector';\r\nimport { ArkArray } from '../../toolkit/arrays/arkArray';\r\nimport { ArkArrayRegistry } from '../../toolkit/arrays/arkArrayRegistry';\r\nimport { ArkArrayStruct } from '../../toolkit/arrays/arkArrayStruct';\r\nimport { ArkArrayObjectReference } from '../../toolkit/arrays/arkArrayObjectReference';\r\n\r\nexport class PropertyArray extends PropertyBase<ArkArray<any>> {\r\n\r\n    public static TYPE: ArkName = ArkName.constantPlain('ArrayProperty');\r\n\r\n    constructor(archive: ArkArchive, name: ArkName) {\r\n        super(archive, name);\r\n\r\n        const arrayType = archive.getName();\r\n\r\n        const position = archive.position;\r\n        try {\r\n            const array = ArkArrayRegistry.readBinary(archive, arrayType, this);\r\n            if(array == null) {\r\n                throw new Error(\"ArkArrayRegistry returned null\");\r\n            }\r\n            this.value = array;\r\n        }\r\n        catch {\r\n            // read unknown\r\n        }\r\n    }\r\n    \r\n    public static create(archive: ArkArchive, name: ArkName): PropertyArray {\r\n        return new PropertyArray(archive, name);\r\n    }\r\n    \r\n    public getType(): ArkName {\r\n        return PropertyArray.TYPE;\r\n    }\r\n    \r\n    public writeBinaryValue(archive: ArkArchive): void {\r\n        archive.putName(this.value.getType());\r\n        this.value.writeBinary(archive);\r\n    }\r\n\r\n    public calculateDataSize(nameSizer: NameSizeCalculator): number {\r\n        return this.value.calculateSize(nameSizer);\r\n    }\r\n\r\n    public calculateAdditionalSize(nameSizer: NameSizeCalculator): number {\r\n        return nameSizer.sizeOf(this.value.getType());\r\n    }\r\n\r\n    public collectNames(collector: NameCollector): void {\r\n        super.collectNames(collector);\r\n        collector.accept(this.value.getType());\r\n        this.collectNames(collector);\r\n    }\r\n    public isDataSizeNeeded(): boolean{\r\n        return this.value instanceof ArkArrayStruct;\r\n    }\r\n}","import { Stream } from 'libvantage';\r\nimport { readString, writeString } from '../../util';\r\nimport { Property } from './property';\r\nimport { NameCollector } from '../namecollector';\r\nimport { ArkName } from '../arkName';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport { NameSizeCalculator } from '../namesizecalculator';\r\nimport {Types, BYTES} from '../typesizes';\r\n\r\nexport abstract class PropertyBase<T> extends Property<T> {\r\n    public name: ArkName;\r\n    public dataSize: number;\r\n    public index: number;\r\n    public value: T;\r\n    static TYPE: ArkName; \r\n    constructor(archive: ArkArchive, name: ArkName, index?:number, value?:T) {\r\n        super();\r\n\r\n        if(value) {\r\n            this.from(name, index || 0, value);\r\n        }\r\n        else {\r\n            this.name = name;\r\n            this.dataSize = archive.getInt();\r\n            this.index = archive.getInt();\r\n        }\r\n    }\r\n\r\n    public from(name: ArkName, index: number, value: T) {\r\n        this.name = name;\r\n        this.index = index;\r\n        this.value = value;\r\n    }\r\n\r\n    public getName(): ArkName {\r\n        return this.name;\r\n    }\r\n    public getNameString(): string {\r\n        return this.name.toString();\r\n    }\r\n\r\n    public setName(name: ArkName): void {\r\n        this.name = name;\r\n    }\r\n    public setNameString(namestring: string): void {\r\n        this.name = ArkName.from(namestring);\r\n    }\r\n    public getTypeString(): string {\r\n        return typeof this;\r\n    }\r\n    public getDataSize(): number {\r\n        return this.dataSize;\r\n    }\r\n    public setDataSize(dataSize: number): void {\r\n        this.dataSize = dataSize;\r\n    }\r\n    public getIndex(): number {\r\n        return this.index;\r\n    }\r\n    public setIndex(index: number): void {\r\n        this.index = index;\r\n    }\r\n    public calculateAdditionalSize(nameSize: NameSizeCalculator): number {\r\n        return 0;\r\n    }\r\n  \r\n    public calculateSize(nameSizer: NameSizeCalculator): number {\r\n        let size = BYTES.Integer * 2;\r\n        this.dataSize = this.calculateDataSize(nameSizer);\r\n\r\n        size += nameSizer.sizeOf(name);\r\n        size += nameSizer.sizeOf(this.getType());\r\n        size += this.calculateAdditionalSize(nameSizer);\r\n        size += this.dataSize;\r\n\r\n        return size;\r\n    }\r\n\r\n    abstract writeBinaryValue(archive: ArkArchive): void;\r\n    \r\n    public writeBinary(archive: ArkArchive): void {\r\n        archive.putName(this.name);\r\n        archive.putName(this.getType());\r\n        archive.putInt(this.dataSize);\r\n        archive.putInt(this.index);\r\n\r\n        this.writeBinaryValue(archive);\r\n    }\r\n    protected isDataSizeNeeded(): boolean {\r\n        return false;\r\n    }\r\n    public collectNames(collector: NameCollector): void {\r\n        collector.accept(this.name);\r\n        collector.accept(this.getType());\r\n    }\r\n    public getValue(): T {\r\n        return this.value;\r\n    }\r\n    public setValue(value: T): void {\r\n        this.value = value;\r\n    }\r\n    public toString(): string {\r\n        return `[value='${this.value}',name='${this.name}', dataSize='${this.dataSize}', index='${this.index}']`;\r\n    }\r\n}",null,"\r\nimport {PropertyBase} from './propertyBase';\r\nimport { ArkName } from '../arkName';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport {Long} from '../basetypes'\r\nimport { NameSizeCalculator } from '../namesizecalculator';\r\nimport { BYTES } from '../typesizes';\r\n\r\nexport class PropertyBool extends PropertyBase<boolean> {\r\n\r\n    public static TYPE: ArkName = ArkName.constantPlain('BoolProperty');\r\n\r\n    constructor(archive: ArkArchive, name: ArkName) {\r\n        super(archive, name);\r\n\r\n        this.value = archive.getByte() !== 0;\r\n    }\r\n    \r\n    public static create(archive: ArkArchive, name: ArkName): PropertyBool {\r\n        return new PropertyBool(archive, name);\r\n    }\r\n    \r\n    public getType(): ArkName {\r\n        return PropertyBool.TYPE;\r\n    }\r\n    public writeBinaryValue(archive: ArkArchive): void {\r\n        archive.putBoolean(this.value);\r\n    }\r\n    public calculateAdditionalSize(nameSizer: NameSizeCalculator): number {\r\n        return BYTES.Boolean;\r\n    }\r\n    public calculateDataSize(): number {\r\n        return BYTES.Boolean;\r\n    }\r\n}","import {PropertyBase} from './propertyBase';\r\nimport { ArkName } from '../arkName';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport {Integer, Primitive} from '../basetypes'\r\nimport { NameSizeCalculator } from '../namesizecalculator';\r\nimport { BYTES } from '../typesizes';\r\nimport { PropertyBinaryConstructor} from './propertyBinaryConstructor';\r\nimport { Struct } from '../structs/struct';\r\nimport { NameCollector } from '../namecollector';\r\nimport { StructRegistry } from '../structs/structRegistry';\r\nimport { ArkByteValue } from '../types/arkByteValue';\r\n\r\nexport class PropertyByte extends PropertyBase<ArkByteValue> {\r\n\r\n    public static TYPE: ArkName = ArkName.constantPlain('ByteProperty');\r\n\r\n    private enumType: ArkName;\r\n\r\n    constructor(archive: ArkArchive, name: ArkName) {\r\n        super(archive, name);\r\n\r\n        this.enumType = archive.getName();\r\n\r\n        this.value = new ArkByteValue(archive, !this.enumType.equals(ArkName.NAME_NONE));\r\n    }\r\n    \r\n    public static create(archive: ArkArchive, name: ArkName): PropertyByte {\r\n        return new PropertyByte(archive, name);\r\n    }\r\n    \r\n    public getType(): ArkName {\r\n        return PropertyByte.TYPE;\r\n    }\r\n    \r\n    public writeBinaryValue(archive: ArkArchive): void {\r\n        archive.putName(this.enumType);\r\n        this.value.writeBinary(archive);\r\n    }\r\n\r\n    public calculateDataSize(nameSizer: NameSizeCalculator): number {\r\n        return this.value.getSize(nameSizer);\r\n    }\r\n\r\n    public calculateAdditionalSize(nameSizer: NameSizeCalculator): number {\r\n        return nameSizer.sizeOf(this.enumType);\r\n    }\r\n\r\n    public collectNames(collector: NameCollector): void {\r\n        super.collectNames(collector);\r\n        collector.accept(this.enumType);\r\n        this.value.collectNames(collector);\r\n    }\r\n\r\n    public get EnumType(): ArkName {\r\n        return this.enumType;\r\n    }\r\n\r\n    public set EnumType(enumType: ArkName) {\r\n        this.enumType = enumType;\r\n    }\r\n}","\r\nimport {PropertyBase} from './propertyBase';\r\nimport { ArkName } from '../arkName';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport {Float} from '../basetypes'\r\nimport { NameSizeCalculator } from '../namesizecalculator';\r\nimport { BYTES } from '../typesizes';\r\n\r\nexport class PropertyFloat extends PropertyBase<Float> {\r\n\r\n    public static TYPE: ArkName = ArkName.constantPlain('FloatProperty');\r\n\r\n    constructor(archive: ArkArchive, name: ArkName, index?: number, value?: any) {\r\n        super(archive, name, index, value);\r\n        if(!value) {\r\n            this.value = archive.getFloat();\r\n        }\r\n        else{\r\n            this.dataSize = this.calculateDataSize();\r\n        }\r\n    }\r\n    \r\n    public static create(archive?: ArkArchive, name?: ArkName, index?: number, value?: number): PropertyFloat {\r\n        return new PropertyFloat(archive, name, index, value);\r\n    }\r\n    \r\n    public getType(): ArkName {\r\n        return PropertyFloat.TYPE;\r\n    }\r\n    public writeBinaryValue(archive: ArkArchive): void {\r\n        archive.putFloat(this.value as number);\r\n    }\r\n    public calculateAdditionalSize(nameSizer: NameSizeCalculator): number {\r\n        return BYTES.Boolean;\r\n    }\r\n    public calculateDataSize(): number {\r\n        return BYTES.Float;\r\n    }\r\n}","\r\nimport {PropertyBase} from './propertyBase';\r\nimport { ArkName } from '../arkName';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport {Integer, Primitive} from '../basetypes'\r\nimport { NameSizeCalculator } from '../namesizecalculator';\r\nimport { BYTES } from '../typesizes';\r\nimport { PropertyBinaryConstructor} from './propertybinaryconstructor';\r\nimport { Property } from './property';\r\n\r\nexport class PropertyInt extends PropertyBase<Integer> {\r\n\r\n    public static TYPE: ArkName = ArkName.constantPlain('IntProperty');\r\n\r\n    constructor(archive: ArkArchive, name: ArkName, index?: number, value?: any) {\r\n        super(archive, name, index, value);\r\n        if(!value) {\r\n            this.value = archive.getInt();\r\n        }\r\n        else{\r\n            this.dataSize = this.calculateDataSize();\r\n        }\r\n    }\r\n    \r\n    public static create(archive?: ArkArchive, name?: ArkName, index?: number, value?: number): PropertyInt {\r\n        return new PropertyInt(archive, name, index, value);\r\n    }\r\n    \r\n    public getType(): ArkName {\r\n        return PropertyInt.TYPE;\r\n    }\r\n    public writeBinaryValue(archive: ArkArchive): void {\r\n        archive.putInt(this.value as number);\r\n    }\r\n    public calculateDataSize(nameSize?: NameSizeCalculator): number {\r\n        return BYTES.Integer;\r\n    }\r\n}","\r\nimport {PropertyBase} from './propertyBase';\r\nimport { ArkName } from '../arkName';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport {Short} from '../basetypes'\r\nimport { NameSizeCalculator } from '../namesizecalculator';\r\nimport { BYTES } from '../typesizes';\r\n\r\nexport class PropertyInt16 extends PropertyBase<Short> {\r\n\r\n    public static TYPE: ArkName = ArkName.constantPlain('Int64Property');\r\n\r\n    constructor(archive: ArkArchive, name: ArkName, index?: number, value?: any) {\r\n        super(archive, name, index, value);\r\n        if(!value) {\r\n            this.value = archive.getShort();\r\n        }\r\n        else {\r\n            this.dataSize = this.calculateDataSize();\r\n        }\r\n    }\r\n    \r\n    public static create(archive?: ArkArchive, name?: ArkName, index?: number, value?: number): PropertyInt16 {\r\n        return new PropertyInt16(archive, name, index, value);\r\n    }\r\n    \r\n    public getType(): ArkName {\r\n        return PropertyInt16.TYPE;\r\n    }\r\n    public writeBinaryValue(archive: ArkArchive): void {\r\n        archive.putShort(this.value as number);\r\n    }\r\n    public calculateDataSize(): number {\r\n        return BYTES.Short;\r\n    }\r\n}","\r\nimport {PropertyBase} from './propertyBase';\r\nimport { ArkName } from '../arkName';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport {Long} from '../basetypes'\r\nimport { NameSizeCalculator } from '../namesizecalculator';\r\nimport { BYTES } from '../typesizes';\r\nimport { BigInteger } from 'big-integer';\r\n\r\nexport class PropertyInt64 extends PropertyBase<Long> {\r\n\r\n    public static TYPE: ArkName = ArkName.constantPlain('Int64Property');\r\n\r\n    constructor(archive: ArkArchive, name: ArkName, index?: number, value?: any) {\r\n        super(archive, name, index, value);\r\n        if(!value) {\r\n            this.value = archive.getLong();\r\n        }\r\n        else {\r\n            this.dataSize = this.calculateDataSize();\r\n        }\r\n    }\r\n    \r\n    public static create(archive?: ArkArchive, name?: ArkName, index?: number, value?: number): PropertyInt64 {\r\n        return new PropertyInt64(archive, name, index, value);\r\n    }\r\n    \r\n    public writeBinaryValue(archive: ArkArchive): void {\r\n        archive.putLong(this.value);\r\n    }\r\n\r\n    public getType(): ArkName {\r\n        return PropertyInt64.TYPE;\r\n    }\r\n\r\n    public calculateDataSize(): number {\r\n        return BYTES.Long;\r\n    }\r\n}","import { PropertyBase } from './propertyBase';\r\nimport { ObjectReference } from '../types/objectReference';\r\nimport { ArkName } from '../arkName';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport { BYTES } from '../typesizes';\r\nimport { NameSizeCalculator } from '../namesizecalculator';\r\n\r\n\r\nexport class PropertyObject extends PropertyBase<ObjectReference> {\r\n\r\n    public static TYPE: ArkName = ArkName.constantPlain('ObjectProperty');\r\n\r\n    constructor(archive: ArkArchive, name: ArkName) {\r\n        super(archive, name);\r\n\r\n        this.value = new ObjectReference(archive, this.dataSize);\r\n    }\r\n    \r\n    public static create(archive: ArkArchive, name: ArkName): PropertyObject {\r\n        return new PropertyObject(archive, name);\r\n    }\r\n    public getSize(): number {\r\n        return 0;\r\n    }\r\n    public getType(): ArkName {\r\n        return PropertyObject.TYPE;\r\n    }\r\n    public writeBinaryValue(archive: ArkArchive): void {\r\n        this.value.writeBinary(archive);\r\n    }\r\n    public calculateDataSize(nameSizer: NameSizeCalculator): number {\r\n        return this.value.getSize(nameSizer);\r\n    }\r\n}","import { ArkName } from '../arkName';\r\nimport { PropertyBinaryConstructor} from './propertyBinaryConstructor';\r\nimport { PropertyInt } from './propertyInt';\r\nimport {PropertyStruct} from './propertyStruct';\r\n\r\nimport { ArkArchive } from '../arkArchive';\r\nimport { Property } from './property';\r\nimport { PropertyByte } from './propertyByte';\r\nimport { PropertyBool } from './propertyBool';\r\nimport { PropertyInt64 } from './propertyInt64';\r\nimport { PropertyUInt64 } from './propertyUInt64';\r\nimport { PropertyInt16 } from './propertyInt16';\r\nimport { PropertyUInt16 } from './propertyUInt16';\r\nimport { PropertyStr } from './propertyStr';\r\nimport { PropertyFloat } from './propertyFloat';\r\nimport { PropertyObject } from './propertyObject';\r\nimport { PropertyBase } from './propertyBase';\r\nimport { PropertyArray } from './propertyArray';\r\n\r\nexport interface PropertyJsonConstructor {\r\n    appendFileSync(node: any): Property<any>;\r\n}\r\ninterface RegistryItem<T> {\r\n    typeof (PropertyBase) : PropertyBase<T>;\r\n}\r\nexport class PropertyRegistry {\r\n\r\n    public static TYPE_MAP: HashMap[] = [];\r\n\r\n    public static addProperty(name: ArkName,\r\n         binary: PropertyBinaryConstructor, json?: PropertyJsonConstructor): void {\r\n            this.TYPE_MAP[name.toString()] = binary;\r\n    }\r\n   \r\n    static construct() {\r\n        this.addProperty(PropertyInt.TYPE, PropertyInt.create);\r\n        this.addProperty(PropertyStruct.TYPE, PropertyStruct.create);\r\n        this.addProperty(PropertyByte.TYPE, PropertyByte.create);\r\n        this.addProperty(PropertyBool.TYPE, PropertyBool.create);\r\n        this.addProperty(PropertyInt64.TYPE, PropertyInt64.create);\r\n        this.addProperty(PropertyUInt64.TYPE, PropertyUInt64.create);\r\n        this.addProperty(PropertyInt16.TYPE, PropertyInt16.create);\r\n        this.addProperty(PropertyUInt16.TYPE, PropertyUInt16.create);\r\n        this.addProperty(PropertyStr.TYPE, PropertyStr.create);\r\n        this.addProperty(PropertyFloat.TYPE, PropertyFloat.create);\r\n        this.addProperty(PropertyObject.TYPE, PropertyObject.create);\r\n        this.addProperty(PropertyArray.TYPE, PropertyArray.create);\r\n    }\r\n    public static readBinary(archive: ArkArchive): Property<any> {\r\n\r\n        const name = archive.getName();\r\n        if(name.equals(ArkName.NAME_NONE)) {\r\n            return null;\r\n        }\r\n        const type = archive.getName();\r\n\r\n        if(!this.TYPE_MAP[type.toString()]) {\r\n            throw new Error('property type is not supporter');\r\n        }\r\n\r\n        return this.TYPE_MAP[type.toString()](archive, name);\r\n    }\r\n    public static createFrom(type: string, name: string, index: number, value: any): Property<any> {\r\n        return this.TYPE_MAP[type](null, ArkName.from(name), index, value); \r\n    }\r\n}\r\n\r\ninterface HashMap {\r\n    [name:string]: PropertyBinaryConstructor;\r\n}","\r\nimport {PropertyBase} from './propertyBase';\r\nimport { ArkName } from '../arkName';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport {Long} from '../basetypes'\r\nimport { NameSizeCalculator } from '../namesizecalculator';\r\nimport { BYTES } from '../typesizes';\r\n\r\nexport class PropertyStr extends PropertyBase<string> {\r\n\r\n    public static TYPE: ArkName = ArkName.constantPlain('StrProperty');\r\n    constructor(archive: ArkArchive, name: ArkName, index?: number, value?: any) {\r\n        super(archive, name, index, value);\r\n        if(!value) {\r\n            this.value = archive.getString();\r\n        }\r\n        else{\r\n            this.dataSize = this.calculateDataSize();\r\n        }\r\n    }\r\n    \r\n    public static create(archive?: ArkArchive, name?: ArkName, index?: number, value?: number): PropertyStr {\r\n        return new PropertyStr(archive, name, index, value);\r\n    }\r\n    \r\n    public getType(): ArkName {\r\n        return PropertyStr.TYPE;\r\n    }\r\n    public writeBinaryValue(archive: ArkArchive): void {\r\n        archive.putString(this.value);\r\n    }\r\n    public calculateDataSize(): number {\r\n        return ArkArchive.getStringLength(this.value);\r\n    }\r\n}","\r\nimport {PropertyBase} from './propertyBase';\r\nimport { ArkName } from '../arkName';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport {Integer, Primitive} from '../basetypes'\r\nimport { NameSizeCalculator } from '../namesizecalculator';\r\nimport { BYTES } from '../typesizes';\r\nimport { PropertyBinaryConstructor} from './propertyBinaryConstructor';\r\nimport { Struct } from '../structs/struct';\r\nimport { NameCollector } from '../namecollector';\r\nimport { StructRegistry } from '../structs/structRegistry';\r\n\r\nexport class PropertyStruct extends PropertyBase<Struct> {\r\n\r\n    public static TYPE: ArkName = ArkName.constantPlain('StructProperty');\r\n\r\n    private structType: ArkName;\r\n\r\n    constructor(archive: ArkArchive, name: ArkName) {\r\n        super(archive, name);\r\n\r\n        this.structType = archive.getName();\r\n\r\n        //const position = archive.position;\r\n        try {\r\n            const struct = StructRegistry.readBinary(archive, this.structType);\r\n            if(struct == null) {\r\n                throw new Error(\"StructRegistry returned null\");\r\n            }\r\n            this.value = struct;\r\n        }\r\n        catch {\r\n            // read unknown\r\n        }\r\n    }\r\n    \r\n    public static create(archive: ArkArchive, name: ArkName): PropertyStruct {\r\n        return new PropertyStruct(archive, name);\r\n    }\r\n    \r\n    public getType(): ArkName {\r\n        return PropertyStruct.TYPE;\r\n    }\r\n    \r\n    public writeBinaryValue(archive: ArkArchive): void {\r\n        archive.putName(this.structType);\r\n        this.value.writeBinary(archive);\r\n    }\r\n    public getValue(): any {\r\n        return this.value;\r\n    }\r\n    public calculateDataSize(nameSizer: NameSizeCalculator): number {\r\n        return this.value.getSize(nameSizer);\r\n    }\r\n\r\n    public calculateAdditionalSize(nameSizer: NameSizeCalculator): number {\r\n        return nameSizer.sizeOf(this.structType);\r\n    }\r\n\r\n    public collectNames(collector: NameCollector): void {\r\n        super.collectNames(collector);\r\n        collector.accept(this.structType);\r\n        this.value.collectNames(collector);\r\n    }\r\n\r\n    public getStructType(): ArkName {\r\n        return this.structType;\r\n    }\r\n\r\n    public setStructType(structType: ArkName): void {\r\n        this.structType = structType;\r\n    }\r\n}","\r\nimport {PropertyBase} from './propertyBase';\r\nimport { ArkName } from '../arkName';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport {Short} from '../basetypes'\r\nimport { NameSizeCalculator } from '../namesizecalculator';\r\nimport { BYTES } from '../typesizes';\r\n\r\nexport class PropertyUInt16 extends PropertyBase<Short> {\r\n\r\n    public static TYPE: ArkName = ArkName.constantPlain('UInt16Property');\r\n\r\n    constructor(archive: ArkArchive, name: ArkName, index?: number, value?: any) {\r\n        super(archive, name, index, value);\r\n        if(!value) {\r\n            this.value = archive.getUShort();\r\n        }\r\n        else {\r\n            this.dataSize = this.calculateDataSize();\r\n        }\r\n    }\r\n    \r\n    public static create(archive?: ArkArchive, name?: ArkName, index?: number, value?: number): PropertyUInt16 {\r\n        return new PropertyUInt16(archive, name, index, value);\r\n    }\r\n    \r\n    public getType(): ArkName {\r\n        return PropertyUInt16.TYPE;\r\n    }\r\n    public writeBinaryValue(archive: ArkArchive): void {\r\n        archive.putUShort(this.value as number);\r\n    }\r\n    public calculateDataSize(): number {\r\n        return BYTES.Short;\r\n    }\r\n}","\r\nimport {PropertyBase} from './propertyBase';\r\nimport { ArkName } from '../arkName';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport {Long} from '../basetypes';\r\nimport {PropertyInt64} from './propertyInt64'\r\n\r\nimport { NameSizeCalculator } from '../namesizecalculator';\r\nimport { BYTES } from '../typesizes';\r\nimport { BigInteger } from 'big-integer';\r\n\r\nexport class PropertyUInt64 extends PropertyBase<Long> {\r\n\r\n    public static TYPE: ArkName = ArkName.constantPlain('UInt64Property');\r\n\r\n    constructor(archive: ArkArchive, name: ArkName, index?: number, value?: any) {\r\n        super(archive, name, index, value);\r\n        if(!value) {\r\n            this.value = archive.getULong();\r\n        }\r\n        else {\r\n            this.dataSize = this.calculateDataSize();\r\n        }\r\n    }\r\n    \r\n    public static create(archive?: ArkArchive, name?: ArkName, index?: number, value?: number): PropertyUInt64 {\r\n        return new PropertyUInt64(archive, name, index, value);\r\n    }\r\n\r\n    public writeBinaryValue(archive: ArkArchive): void {\r\n        archive.putULong(this.value);\r\n    }\r\n\r\n    public getType(): ArkName {\r\n        return PropertyUInt64.TYPE;\r\n    }\r\n    public calculateDataSize(): number {\r\n        return BYTES.Long;\r\n    }\r\n}","import { NameContainer } from '../namecontainer';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport { NameSizeCalculator } from '../namesizecalculator';\r\nimport { NameCollector } from '../namecollector';\r\n\r\nexport abstract class Struct implements NameContainer {\r\n\r\n    abstract collectNames(nameCollector: NameCollector): void;\r\n\r\n    abstract isNative(): boolean;\r\n\r\n    abstract writeBinary(archive: ArkArchive): void;\r\n    \r\n    abstract getSize(nameSizer: NameSizeCalculator): number;\r\n}","import {Struct} from './struct'\r\nimport { NameCollector } from '../namecollector';\r\n\r\nexport abstract class StructBase extends Struct {\r\n\r\n    public isNative(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public collectNames(collector: NameCollector): void {\r\n\r\n    }\r\n}",null,null,"import { StructBase } from './structBase';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport { BYTES } from '../typesizes';\r\nimport { NameSizeCalculator } from '../namesizecalculator';\r\n\r\n\r\nexport class StructLinearColor extends StructBase {\r\n    \r\n    private r: number;\r\n    private g: number;\r\n    private b: number;\r\n    private a: number;\r\n\r\n    constructor(archive: ArkArchive) {\r\n        super();\r\n\r\n        this.r = archive.getFloat();\r\n        this.g = archive.getFloat();\r\n        this.b = archive.getFloat();\r\n        this.a = archive.getFloat();        \r\n    }\r\n\r\n    public static create(archive: ArkArchive): StructLinearColor {\r\n        return new StructLinearColor(archive);\r\n    }\r\n\r\n    public writeBinary(archive: ArkArchive): void {\r\n        archive.putFloat(this.r);\r\n        archive.putFloat(this.g);\r\n        archive.putFloat(this.b);\r\n        archive.putFloat(this.a);        \r\n    }\r\n\r\n    public getSize(nameSizer: NameSizeCalculator): number {\r\n        return BYTES.Float * 4;\r\n    }\r\n}","import { StructBase } from './structBase';\r\nimport { PropertyContainer } from '../propertyContainer';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport { NameCollector } from '../namecollector';\r\nimport { NameSizeCalculator } from '../namesizecalculator';\r\nimport { ArkName } from '../arkName';\r\nimport { Property } from '../properties/property';\r\nimport { PropertyRegistry } from '../properties/propertyRegistry';\r\n\r\nexport class StructPropertyList extends PropertyContainer implements StructBase {\r\n\r\n    private properties: Property<any>[];\r\n\r\n    constructor(archive: ArkArchive) {\r\n        super();\r\n\r\n        this.properties = [];\r\n        let property = PropertyRegistry.readBinary(archive);\r\n\r\n        while(property != null) {\r\n            this.properties.push(property);\r\n            property = PropertyRegistry.readBinary(archive);\r\n        }\r\n    }\r\n\r\n    public static create(archive: ArkArchive): StructBase {\r\n        return new StructPropertyList(archive);\r\n    }\r\n\r\n    public getProperties(): Property<any>[] {\r\n        return this.properties;\r\n    }\r\n    public addProperty(property: any) {\r\n        this.properties.push(PropertyRegistry.createFrom(property.type, property.name, property.index, \r\n            property.value));\r\n    }\r\n    public writeBinary(archive: ArkArchive): void {\r\n        this.properties.forEach(p => p.writeBinary(archive));\r\n\r\n        archive.putName(ArkName.NAME_NONE);\r\n    }\r\n\r\n    public isNative(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public collectNames(collector: NameCollector): void {\r\n\r\n    }\r\n    public getValue(): any {\r\n        return this.properties;\r\n    }\r\n    public getSize(nameSizer: NameSizeCalculator): number {\r\n        let size = nameSizer.sizeOf(ArkName.NAME_NONE);\r\n\r\n        size += this.properties.reduce( (a, p) => (a + p.calculateSize(nameSizer)), 0);\r\n\r\n        return size;\r\n    }\r\n}","import { ArkName } from '../arkName';\r\nimport { StructBinaryConstructor} from './structBinaryConstructor';\r\nimport {StructJsonConstructor} from './structJsonConstructor';\r\n\r\nimport { ArkArchive } from '../arkArchive';\r\nimport { StructVector } from './structVector';\r\nimport { StructUniqueNetIdRepl } from './structUniqueNetIdRepl';\r\n\r\nimport { StructPropertyList } from './structPropertyList';\r\nimport { Struct } from './struct';\r\nimport { StructLinearColor } from './structLinearColor';\r\n\r\nexport class StructRegistry {\r\n\r\n    public static TYPE_MAP: BinaryHashMap[] = [];\r\n    public static TYPE_JSON_MAP: JsonHashMap[] = [];\r\n\r\n    public static addStruct(name: string, binary: StructBinaryConstructor, json?: StructJsonConstructor): void {\r\n        this.TYPE_MAP[name.toString()] = binary;\r\n        this.TYPE_JSON_MAP[name.toString()] = json;\r\n    }\r\n    static construct() {\r\n        this.addStruct(\"Vector\", StructVector.create);\r\n        this.addStruct(\"UniqueNetIdRepl\", StructUniqueNetIdRepl.create);\r\n        this.addStruct(\"LinearColor\", StructLinearColor.create);\r\n\r\n    }\r\n    public static readBinary(archive: ArkArchive, structType: ArkName): Struct {\r\n\r\n        if(this.TYPE_MAP[structType.toString()]) {\r\n            return this.TYPE_MAP[structType.toString()](archive);\r\n        }\r\n        try {\r\n            return new StructPropertyList(archive);\r\n        }\r\n        catch {\r\n            throw new Error(\"Unknown struct type\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface BinaryHashMap {\r\n    [name:string]: StructBinaryConstructor;\r\n}\r\ninterface JsonHashMap {\r\n    [name:string]: StructJsonConstructor;\r\n}","import { ArkArchive } from '../arkArchive';\r\nimport {StructBase} from './structBase'\r\nimport {BYTES} from '../typesizes'\r\nimport { NameSizeCalculator } from '../namesizecalculator';\r\nimport { ArkName } from '../arkName';\r\n\r\nexport class StructUniqueNetIdRepl extends StructBase {\r\n\r\n    private unknown: number;\r\n    private netId: ArkName;\r\n\r\n\r\n    constructor(archive: ArkArchive) {\r\n        super();\r\n\r\n        this.unknown = archive.getInt();\r\n        this.netId = archive.getName();\r\n    }\r\n\r\n    public static create(archive: ArkArchive): StructUniqueNetIdRepl {\r\n        return new StructUniqueNetIdRepl(archive);\r\n    }\r\n\r\n    public writeBinary(archive: ArkArchive): void {\r\n        archive.putInt(this.unknown);\r\n        archive.putString(this.netId.toString());\r\n    }\r\n\r\n    public getSize(nameSizer: NameSizeCalculator): number {\r\n        return BYTES.Integer + ArkArchive.getStringLength(this.netId.toString());\r\n    }\r\n}","import { ArkArchive } from '../arkArchive';\r\nimport {StructBase} from './structBase'\r\nimport {BYTES} from '../typesizes'\r\nimport { NameSizeCalculator } from '../namesizecalculator';\r\n\r\nexport class StructVector extends StructBase {\r\n\r\n    private x: number;\r\n    private y: number;\r\n    private z: number;\r\n\r\n    constructor(archive: ArkArchive) {\r\n        super();\r\n\r\n        this.x = archive.getFloat();\r\n        this.y = archive.getFloat();\r\n        this.z = archive.getFloat();\r\n    }\r\n\r\n    public static create(archive: ArkArchive): StructVector {\r\n        return new StructVector(archive);\r\n    }\r\n\r\n    public writeBinary(archive: ArkArchive): void {\r\n        archive.putFloat(this.x);\r\n        archive.putFloat(this.y);\r\n        archive.putFloat(this.z);\r\n    }\r\n\r\n    public getSize(nameSizer: NameSizeCalculator): number {\r\n        return BYTES.Float * 3;\r\n    }\r\n   \r\n    public getX(): number {\r\n        return this.x;\r\n    }\r\n    public getY(): number {\r\n        return this.y;\r\n    }\r\n    public getZ(): number {\r\n        return this.z;\r\n    }   \r\n    public setX(value: number): void {\r\n        this.x = value;\r\n    }\r\n    public setY(value: number): void {\r\n        this.y = value;\r\n    }\r\n    public setZ(value: number): void {\r\n        this.z = value;\r\n    }    \r\n}","import { NameContainer } from '../namecontainer';\r\nimport { ArkName } from '../arkName';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport { NameCollector } from '../namecollector';\r\nimport { NameSizeCalculator } from '../namesizecalculator';\r\n\r\nexport class ArkByteValue implements NameContainer {\r\n \r\n    public byteValue: number;\r\n\r\n    private nameValue: ArkName;\r\n\r\n    constructor(archive?: ArkArchive, isName?: boolean, nameValue?: ArkName, byteValue?: number) {\r\n        if(name) {\r\n            this.nameValue = nameValue;\r\n        }\r\n        else if(byteValue) {\r\n            this.setByteValue(byteValue);\r\n        }\r\n        else {\r\n            this.readBinary(archive, isName);\r\n        }\r\n    }\r\n\r\n    public getTypeString(): string {\r\n        return typeof this;\r\n    }\r\n    public get ByteValue(): number {\r\n        return this.byteValue;\r\n    }\r\n    public set ByteValue(byteValue: number) {\r\n        this.byteValue = byteValue;\r\n    }\r\n    public get NameValue(): ArkName {\r\n        return this.nameValue;\r\n    }\r\n    public set NameValue(nameValue: ArkName) {\r\n        this.nameValue = nameValue;\r\n    }\r\n    public setByteValue(byteValue: number) {\r\n        this.nameValue = null;\r\n        this.byteValue = byteValue;\r\n    }\r\n    public readBinary(archive: ArkArchive, name:boolean): void {\r\n        if(name) {\r\n            this.nameValue = archive.getName();\r\n        }\r\n        else {\r\n            this.byteValue = archive.getByte();\r\n        }\r\n    }\r\n \r\n    public writeBinary(archive: ArkArchive): void {\r\n        if(this.nameValue) {\r\n            archive.putName(this.nameValue);\r\n        }\r\n        else {\r\n            archive.putByte(this.byteValue);\r\n        }\r\n    }\r\n\r\n    public collectNames(collector: NameCollector): void {\r\n        if(this.nameValue) {\r\n            collector.accept(this.nameValue);\r\n        }\r\n    }\r\n    public getSize(nameSizer: NameSizeCalculator): number {\r\n        return this.nameValue != null ? nameSizer.sizeOf(this.nameValue) : 1;\r\n    }\r\n}","import { Stream } from 'libvantage';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport { BYTES } from '../typesizes';\r\n\r\nexport class LocationData\r\n{\r\n    public X : number;\r\n    public Y : number;\r\n    public Z : number;\r\n    public pitch : number;\r\n    public yaw : number;\r\n    public roll : number;\r\n    constructor(archive?: ArkArchive)   {\r\n        if(archive) {\r\n            this.read(archive);\r\n        }\r\n        else {\r\n            this.X = 0;\r\n            this.Y = 0;\r\n            this.Z = 0;\r\n            this.pitch = 0;\r\n            this.yaw = 0;\r\n            this.roll = 0;\r\n        }\r\n    }\r\n\r\n    static copyFrom(location: LocationData): LocationData {\r\n        const temp = new LocationData();\r\n        temp.X = location.X;\r\n        temp.Y = location.Y;\r\n        temp.Z = location.Z;\r\n        temp.pitch = location.pitch;\r\n        temp.yaw = location.yaw;\r\n        temp.roll = location.roll;\r\n        return temp;        \r\n    }\r\n\r\n    private read(archive?: ArkArchive): void {\r\n        this.X = archive.getFloat();\r\n        this.Y = archive.getFloat();\r\n        this.Z = archive.getFloat();\r\n        this.pitch = archive.getFloat();\r\n        this.yaw = archive.getFloat();\r\n        this.roll = archive.getFloat(); \r\n    }\r\n\r\n    public toBuffer(): Buffer {\r\n        const io = Stream.reserve(12);\r\n        io.writeFloat(this.X);\r\n        io.writeFloat(this.Y);\r\n        io.writeFloat(this.Z);\r\n        io.writeFloat(this.pitch);\r\n        io.writeFloat(this.yaw);\r\n        io.writeFloat(this.roll); \r\n        return io.getBuffer();\r\n    }\r\n    public getSize(): number {\r\n        return BYTES.Float * 6;\r\n    }\r\n}","import { NameContainer } from '../namecontainer';\r\nimport { ArkName } from '../arkName';\r\nimport { ArkArchive } from '../arkArchive';\r\nimport { NameCollector } from '../namecollector';\r\nimport { NameSizeCalculator } from '../namesizecalculator';\r\nimport { BYTES } from '../typesizes';\r\n\r\nconst enum ObjectType {\r\n    Id = 0,\r\n    Path = 1,\r\n    PathNoType = 2,\r\n}\r\n\r\nexport class ObjectReference implements NameContainer {\r\n \r\n    public length: number;\r\n    public objectType: number;\r\n    public objectId: number;\r\n\r\n    private objectString: ArkName;\r\n\r\n    constructor(archive: ArkArchive, length: number) {\r\n        this.length = length;\r\n        this.readBinary(archive);\r\n    }\r\n    public getTypeString(): string {\r\n        return typeof this;\r\n    }\r\n    public get Length(): number {\r\n        return this.length;\r\n    }\r\n    public set Length(dataSize: number) {\r\n        this.length = dataSize;\r\n    }\r\n    public get ObjectType(): number {\r\n        return this.objectType;\r\n    }\r\n    public set ObjectType(objectType: number) {\r\n        this.objectType = objectType;\r\n    }\r\n    public get ObjectId(): number {\r\n        return this.objectType;\r\n    }\r\n    public set ObjectId(objectId: number) {\r\n        this.objectId = objectId;\r\n    }\r\n    public get ObjectString(): string {\r\n        return this.objectString.toString();\r\n    }\r\n    public set ObjectString(objectString: string) {\r\n        this.objectString = ArkName.from(objectString);\r\n    }    \r\n    public readBinary(archive: ArkArchive): void {\r\n        if(this.length >= 8) {\r\n            this.objectType = archive.getInt();\r\n            if(this.objectType == ObjectType.Id) {\r\n                this.objectId = archive.getInt();\r\n            }\r\n            else if(this.objectType == ObjectType.Path) {\r\n                this.objectString = archive.getName();\r\n            }\r\n        }\r\n        else if(this.length === 4) {\r\n            this.objectType = ObjectType.Id;\r\n            this.objectId = archive.getInt();\r\n        }\r\n        else {\r\n            throw new Error(\"Invalid ObjectReference\");\r\n        }\r\n    }\r\n    public writeBinary(archive: ArkArchive): void {\r\n        if (this.objectType == ObjectType.Path || length >= 8 && this.objectType != ObjectType.PathNoType) {\r\n            archive.putInt(this.objectType);\r\n        }\r\n        if (this.objectType == ObjectType.Id) {\r\n            archive.putInt(this.objectId);\r\n        } \r\n        else if (this.objectType == ObjectType.Path || this.objectType == ObjectType.PathNoType) {\r\n            archive.putName(this.objectString);\r\n        }\r\n    }\r\n    protected isDataSizeNeed(): boolean {\r\n        return false;\r\n    }\r\n    public collectNames(collector: NameCollector): void {\r\n        if(this.objectType === ObjectType.Path) {\r\n            collector.accept(this.objectString);\r\n        }\r\n    }\r\n    public isId(): boolean {\r\n        return this.objectType === ObjectType.Id;\r\n    }\r\n    public isPath(): boolean {\r\n        return this.objectType === ObjectType.Path;\r\n    }\r\n    public toString(): string {\r\n        return `[ObjectReference [objectType=\"'${this.objectType}',objectId='${this.objectId}', objectString='${this.objectString}', length='${this.length}']`;\r\n    }\r\n    public getSize(nameSizer: NameSizeCalculator): number {\r\n\r\n        if(this.objectType == ObjectType.Id) {\r\n            return this.length;\r\n        }\r\n        else if(this.objectType == ObjectType.Path) {\r\n            return BYTES.Integer + nameSizer.sizeOf(this.objectString);\r\n        }\r\n        else if(this.objectType == ObjectType.PathNoType) {\r\n            return nameSizer.sizeOf(this.objectString);\r\n        }\r\n        else {\r\n            return this.length;\r\n        }\r\n    }\r\n}"],"sourceRoot":".."}